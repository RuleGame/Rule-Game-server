{"version":3,"sources":["assets/bucket.svg","components/ActionButton.tsx","components/Layer.tsx","constants/index.ts","store/selectors/index.ts","components/BoardEditorObjectGridSelect.tsx","store/actions/layers.ts","components/Layers.tsx","store/actions/notifications.ts","components/Notification.tsx","components/Notifications.tsx","store/actions/games.ts","components/ShapeObject.tsx","constants/data-cy-builders.ts","utils/atom-match.ts","components/BoardPreview.tsx","components/GameSelect.tsx","components/GameSelects.tsx","components/BoardObjectsArrayCheckBox.tsx","components/AddGameForm.tsx","store/actions/rule-arrays.ts","components/AddRuleArrayForm.tsx","store/actions/board-objects-arrays.ts","constants/data-cy.ts","components/BoardEditorObject.tsx","components/BoardEditor.tsx","components/AddBoardObjectsArrayForm.tsx","pages/EntrancePage.tsx","constants/env.ts","store/actions/rule-row.ts","components/BoardObject.tsx","components/Bucket.tsx","components/Board.tsx","store/actions/page.ts","store/actions/game.ts","components/GuessRuleForm.tsx","store/selectors/rule-row.ts","components/Game.tsx","store/reducers/__helpers__/PersistConstants.ts","pages/RuleGamePage.tsx","App.tsx","store/epics/page.ts","store/epics/rule-row.tsx","store/epics/rule-arrays.ts","store/epics/board-object-arrays.ts","store/epics/__helpers__/objects-creator.ts","store/epics/games.ts","store/epics/game.ts","store/epics/index.ts","store/reducers/page.ts","store/reducers/rule-row.ts","store/reducers/layers.ts","utils/removeFirst.ts","store/reducers/rule-arrays.ts","store/reducers/board-objects-arrays.ts","store/reducers/games.ts","store/reducers/notifications.ts","store/reducers/game.ts","store/reducers/index.ts","store/configureStore.ts","index.tsx","utils/atom-parser.ts","assets/smiley-face.png","@types/index.ts"],"names":["module","exports","ActionButton","actionButton","layerId","dispatch","useDispatch","handleClick","useCallback","actions","action","Array","isArray","map","Button","primary","onClick","label","Layer","layer","onLayerClose","closeLayer","id","onEsc","closeOnEsc","undefined","onClickOutside","closeOnClickOutside","position","Box","pad","overflow","data-cy","dataCyIdentifier","title","Heading","color","level","description","actionButtons","key","buckets","pos","BucketPosition","BL","x","y","TL","rows","BR","cols","TR","colors","Color","RED","BLUE","BLACK","YELLOW","shapes","Shape","SQUARE","TRIANGLE","STAR","CIRCLE","pageSelector","state","page","ruleRowIndexSelector","ruleRow","ruleRowIndex","allAtomCountersZeroSelector","createSelector","atomCounts","atomCounters","Object","values","every","count","boardObjectsSelector","boardObjectsById","boardObjectsToBucketsToAtomsSelector","boardObjectsToBucketsToAtoms","boardObjectToBucketsSelector","entries","reduce","acc","boardObjectId","bucketToAtoms","nonEmptyBuckets","filter","size","Set","allChecksSelector","boardObjects","boardObject","shape","CHECK","noMoreMovesSelector","allAtomCountersZero","boardObjectToBuckets","allChecks","bucketsSet","GridArea","pausedSelector","paused","disabledBucketSelector","totalMoveHistory","length","dropped","debugModeSelector","debugMode","boardObjectsToDebugInfoSelector","acc1","acc2","value","from","toString","historyDebugInfoSelector","initialBoardObjectsById","totalHistory","index","dragged","rawAtomsSelector","rawRuleArrayString","gameCompletedSelector","gameCompleted","layersSelector","layers","layerIds","layersById","ruleArraysByIdSelector","ruleArrays","byId","ruleArraysSelector","allIds","ruleArraysById","ruleArraysIds","boardObjectsArraysByIdSelector","boardObjectArrays","boardObjectsArraysSelector","boardObjectsArraysById","boardObjectsArraysIds","gamesByIdSelector","games","gamesSelector","gamesById","gamesIds","notificationsByIdSelector","JSON","stringify","shortid","version","curr","rest","boardObjectsArrays","stringified","notifications","notificationsIdsSelector","ids","orderSelector","notificationsById","notificationsIds","order","addLayer","createAction","actionButtonsWithKeys","removeLayer","Layers","useSelector","addNotification","removeNotification","Notification","notificationId","notification","modal","margin","vertical","horizontal","responsive","plain","align","direction","gap","justify","round","elevation","background","icon","Close","Notifications","notificationsId","loadGames","createAsyncAction","file","error","addGame","name","ruleArray","useRandomBoardObjects","numRandomBoardObjects","numConsecutiveSuccessfulMovesBeforePromptGuess","restartIfNotCleared","setGameRuleArray","setGameBoardObjectsArrays","enterGame","removeGame","ShapeObject","React","forwardRef","ref","className","shapeObjectId","debugInfo","canDrag","data-tip","data-for","style","display","justifyContent","width","height","opacity","VALID_SHAPES","has","cursor","data-shape","star","circle","square","triangle","happy","src","HappyFace","alt","bucket","bucketSvg","check","nothing","shapesMapping","type","split","item","xYToPosition","positionToXy","Math","floor","indexToPos","BoardPreview","boardObjectByPos","useMemo","Grid","fill","columns","range","j","i","border","Text","BUCKET","maxLength","replace","s","GameSelect","showEditButtons","game","View","min","line","Paragraph","boardObjectsArray","GameSelects","onDeleteAll","Trash","BoardObjectsArrayCheckBox","boardObjectsArrayId","onChange","checked","boardObjectsArrayName","CheckBox","AddGameForm","useState","setName","isCheckedBoardObjectsArrays","setIsCheckedBoardObjectsArrays","selectedRuleArray","setSelectedRuleArray","setUseRandomBoardObjects","setNumRandomBoardObjects","setNumConsecutiveSuccessfulMovesBeforePromptGuess","Form","onSubmit","FormField","TextInput","required","event","target","placeholder","RadioButton","Number","trim","addRuleArray","rawRuleArray","rawOrder","removeRuleArray","AddRuleArrayForm","setRuleArray","setOrder","request","e","TextArea","wrap","addBoardObjectsArray","boardObjectsArrayString","addToAllGames","removeBoardObjectsArray","CyLayer","BoardEditorObjectGridSelect","onClose","onDelete","side","areas","COLORS","start","end","SHAPES","RADIO_BUTTONS","gridArea","String","BoardEditorObject","open","setOpen","DropButton","onOpen","dropAlign","top","left","dropContent","BoardEditor","onLoad","boardObjectsByPos","setBoardObjectByPos","b","AddBoardObjectsForm","setBoardObjectsArray","setAddToAllGames","EntrancePage","process","showEditGames","move","dropAttempt","touch","removeBoardObject","loadRuleArray","gameId","setRuleRowIndex","endRuleArray","endRuleRow","resumeGame","enableDebugMode","disableDebugMode","completeGame","StyledShapeObject","styled","BoardObject","useDrag","StyledBucket","props","isOver","Bucket","onDrop","canDrop","useDrop","drop","accept","collect","monitor","HAPPY","StyledBoard","div","StyledBoardObject","bucketCoord","Board","boardObjectsToBuckets","onBoardObjectClick","disabledBucket","boardObjectsToDebugInfo","goToPage","nextBoardObjectsArray","setGameId","GuessRuleForm","ruleGuess","setRuleGuess","a","document","createElement","href","click","GridAreaName","currGameIdSelector","currGameId","currGameNameSelector","PersistKeys","Game","debugModeEnabled","historyDebugInfo","rawAtoms","allChecked","gameName","HEADING","DEBUG_TOGGLE","RULE_ARRAY","BOARD","HISTORY","FORM","bottom","rawAtom","droppedItem","dropAttemptString","RuleGamePage","App","Grommet","full","combineEpics","action$","state$","pipe","isActionOf","payload","numRuleRows","lastMoveSuccessful","delay","switchMap","currGameNumConsecutiveSuccessfulMovesBeforePromptGuessSelector1","numConsecutiveSuccessfulMoves","numConsecutiveSuccessfulMovesSelector","push","Image","fit","GUESS_PROMPT","numRuleRowsSelector","noSuccessfulMoves","ruleArrayInfos","ruleArrayInfo","successfulMoves","noSuccessfulMovesSelector","success","parseRuleArray","parse","failure","message","randomObjectsCreator","numObjects","sampleSize","sample","async","Response","Blob","text","boardObjectsArraysWithoutStringified","ruleArraysWithoutValues","currIndex","currBoardObjectsArrayIndex","currBoardObjectsArrayIndexSelector","rootEpic","REHYDRATE","File","simpleRand5","initialState","reducer","getType","touchAttempts","dropAttempts","NaN","parsingRuleArray","ruleRowsCompleted","getBoardObjectsToBucketsToAtoms","atom","ANY","isNaN","atomMatch","fns","fn","forEach","isFinite","add","keyBy","counter","preOrderBoardObjectsToBucketsToAtoms","boardObjectsIdsByPosition","bucketsToAtoms","some","atoms","highestPos","find","validBoardObjects","validBoardObject","matchedAtoms","newTotalMoveHistory","newAtomCounts","atomId","newLayersById","array","indexOf","slice","PersistVersions","GAMES","RULE_ARRAYS","BOARD_OBJECTS_ARRAYS","isRequesting","persistReducer","storage","transforms","createTransform","outboundState","newById","removeFirst","allIdsSet","createRootReducer","combineReducers","epicMiddleware","createEpicMiddleware","middleware","createDynamicMiddlewares","window","__REACT_DEVTOOLS_GLOBAL_HOOK__","inject","composeEnhancers","compose","store","createStore","applyMiddleware","persistor","persistStore","Cypress","run","ReactDOM","render","backend","HTML5Backend","getElementById","convertRawAtomFnToAtomFn","rawAtomFn","reversedTotalMoveHistory","reverse","findMostRecentId","predicate","mostRecent","parseAtomRawFnString","rawAtomFnString","bucketPosition","regex","fnsRawStrings","match","Error","fnStrings","fnString","evalFn","eval","parseAtomString","matches","exec","matchedCounter","matchedShape","matchedColor","matchedPosition","matchedFn","Infinity","errors","validShapes","includes","join","generate","parseRow","row"],"mappings":"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","file":"static/js/main.48d4d54a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bucket.dc583d8d.svg\";","import React, { useCallback } from 'react';\nimport { Button } from 'grommet';\nimport { useDispatch } from 'react-redux';\nimport { Dispatch } from 'redux';\n\nimport { ActionButton as ActionButtonType } from '../@types';\nimport { RootAction } from '../store/actions';\n\nconst ActionButton: React.FunctionComponent<{\n  actionButton: ActionButtonType;\n  layerId: string;\n}> = ({ actionButton, layerId }) => {\n  const dispatch: Dispatch<RootAction> = useDispatch();\n  const handleClick = useCallback(() => {\n    let { action: actions } = actionButton;\n    if (!Array.isArray(actions)) {\n      actions = [actions];\n    }\n    actions.map((action) => dispatch(typeof action === 'function' ? action(layerId) : action));\n  }, [actionButton, dispatch, layerId]);\n  return <Button primary onClick={handleClick} label={actionButton.label} />;\n};\n\nexport default ActionButton;\n","import React, { useCallback } from 'react';\nimport { Box, Heading, Layer as GrommetLayer } from 'grommet';\nimport { LayerData } from '../@types/layers';\nimport ActionButton from './ActionButton';\n\nconst Layer: React.FunctionComponent<{\n  layer: LayerData;\n  onLayerClose: (layerId: string) => void;\n}> = ({ layer, onLayerClose }) => {\n  const closeLayer = useCallback(() => onLayerClose(layer.id), [layer.id, onLayerClose]);\n\n  return (\n    <GrommetLayer\n      onEsc={layer.closeOnEsc ? closeLayer : undefined}\n      onClickOutside={layer.closeOnClickOutside ? closeLayer : undefined}\n      position=\"top\"\n    >\n      <Box pad=\"large\" overflow=\"auto\" data-cy={layer.dataCyIdentifier}>\n        {typeof (layer.title as string) === 'string' ? (\n          <Heading color=\"red\" level=\"3\">\n            {layer.title}\n          </Heading>\n        ) : (\n          layer.title\n        )}\n        {layer.description}\n        <div>\n          {layer.actionButtons.map((actionButton) => (\n            <ActionButton actionButton={actionButton} key={actionButton.key} layerId={layer.id} />\n          ))}\n        </div>\n      </Box>\n    </GrommetLayer>\n  );\n};\n\nexport default Layer;\n","import { BucketPosition, BucketType, Color, Shape } from '../@types';\n\nexport const rows = 8;\nexport const cols = 8;\n\nexport const buckets: BucketType[] = [\n  { pos: BucketPosition.BL, x: 0, y: 0, id: `bucket-${BucketPosition.BL}` },\n  { pos: BucketPosition.TL, x: 0, y: rows - 1, id: `bucket-${BucketPosition.TL}` },\n  { pos: BucketPosition.BR, x: cols - 1, y: 0, id: `bucket-${BucketPosition.BR}` },\n  { pos: BucketPosition.TR, x: cols - 1, y: rows - 1, id: `bucket-${BucketPosition.TR}` },\n];\n\nexport const colors: Color[] = [Color.RED, Color.BLUE, Color.BLACK, Color.YELLOW];\n\nexport const shapes: Shape[] = [Shape.SQUARE, Shape.TRIANGLE, Shape.STAR, Shape.CIRCLE];\n\nexport const borderWidth = 1;\nexport const borderHeight = 1;\n\nexport const FILE_VERSION = '0.0.0';\nexport const FEEDBACK_DURATION = 1000;\n\nexport const RULE_EMAIL_ADDRESS = 'w2020rulegame@gmail.com';\n","import { createSelector } from 'reselect';\nimport shortid from 'shortid';\nimport { RootState } from '../reducers';\nimport { BoardObjectType, BucketPosition, ExportedFile, Shape } from '../../@types';\nimport { FILE_VERSION } from '../../constants';\n\nexport const pageSelector = (state: RootState) => state.page.page;\n\nexport const ruleRowIndexSelector = (state: RootState) => state.ruleRow.ruleRowIndex;\n\nexport const atomCountersSelector = (state: RootState) => state.ruleRow.atomCounts;\n\nexport const allAtomCountersZeroSelector = createSelector(\n  [ruleRowIndexSelector, atomCountersSelector],\n  (ruleRowIndex, atomCounters) => Object.values(atomCounters).every((count) => count <= 0),\n);\n\nexport const boardObjectsByIdSelector = (state: RootState) => state.ruleRow.boardObjectsById;\n\nexport const boardObjectsSelector = createSelector([boardObjectsByIdSelector], (boardObjectsById) =>\n  Object.values(boardObjectsById),\n);\n\nexport const boardObjectsToBucketsToAtomsSelector = (state: RootState) =>\n  state.ruleRow.boardObjectsToBucketsToAtoms;\n\nexport const boardObjectToBucketsSelector = createSelector(\n  [boardObjectsToBucketsToAtomsSelector],\n  (boardObjectsToBucketsToAtoms) => {\n    return Object.entries(boardObjectsToBucketsToAtoms).reduce<{\n      [boardObjectId: string]: Set<BucketPosition>;\n    }>((acc, [boardObjectId, bucketToAtoms]) => {\n      const nonEmptyBuckets = Object.entries(bucketToAtoms)\n        .filter(([, bucketSet]) => bucketSet.size > 0)\n        .map(([bucketId]) => bucketId);\n\n      return {\n        ...acc,\n        [boardObjectId]: new Set((nonEmptyBuckets as unknown) as BucketPosition[]),\n      };\n    }, {});\n  },\n);\n\nexport const allChecksSelector = createSelector([boardObjectsSelector], (boardObjects) =>\n  boardObjects.every((boardObject) => boardObject.shape === Shape.CHECK),\n);\n\nexport const noMoreMovesSelector = createSelector(\n  [allAtomCountersZeroSelector, boardObjectToBucketsSelector, allChecksSelector],\n  (allAtomCountersZero, boardObjectToBuckets, allChecks) =>\n    allAtomCountersZero ||\n    Object.values(boardObjectToBuckets).every((bucketsSet) => bucketsSet.size === 0) ||\n    allChecks,\n);\ncreateSelector(\n  [boardObjectsSelector, boardObjectsToBucketsToAtomsSelector],\n  (boardObjects, boardObjectsToBucketsToAtoms) =>\n    boardObjects.filter((boardObject) => boardObject.id in boardObjectsToBucketsToAtoms),\n);\n\nexport const pausedSelector = (state: RootState) => state.ruleRow.paused;\n\nexport const totalHistorySelector = (state: RootState) => state.ruleRow.totalMoveHistory;\n\nexport const dropAttemptsSelector = (state: RootState) => state.ruleRow.dropAttempts;\n\nexport const disabledBucketSelector = (state: RootState) =>\n  state.ruleRow.paused && state.ruleRow.totalMoveHistory.length > 0\n    ? state.ruleRow.totalMoveHistory[state.ruleRow.totalMoveHistory.length - 1].dropped\n    : undefined;\n\nexport const debugModeSelector = (state: RootState) => state.ruleRow.debugMode;\n\nexport const boardObjectsToDebugInfoSelector = createSelector(\n  [debugModeSelector, boardObjectsSelector, boardObjectToBucketsSelector],\n  (debugMode, boardObjects, boardObjectToBuckets) =>\n    debugMode\n      ? boardObjects.reduce(\n          (acc1, boardObject) => ({\n            ...acc1,\n            [boardObject.id]: `${Object.entries(boardObject).reduce(\n              (acc2, [key, value]) => `${acc2}${key}: ${value}\\n`,\n              '',\n            )}buckets: [${\n              boardObject.id in boardObjectToBuckets\n                ? Array.from(boardObjectToBuckets[boardObject.id]).toString()\n                : ''\n            }]\\n`,\n          }),\n          {},\n        )\n      : undefined,\n);\n\nexport const initialBoardObjectsByIdSelector = (state: RootState) =>\n  state.ruleRow.initialBoardObjectsById;\n\nexport const historyDebugInfoSelector = createSelector(\n  [totalHistorySelector, initialBoardObjectsByIdSelector, debugModeSelector],\n  (totalHistory, initialBoardObjectsById, debugMode) =>\n    debugMode\n      ? totalHistory.map(\n          ({ dragged, dropped }, index) =>\n            `----------------\\n${index}\\nBoardObject:\\n${Object.entries(\n              initialBoardObjectsById[dragged],\n            ).reduce(\n              (acc2, [key, value]) => `${acc2}${key}: ${value}\\n`,\n              '',\n            )}\\nBucket Dropped: ${dropped}`,\n        )\n      : undefined,\n);\n\nexport const rawAtomsSelector = (state: RootState) => state.ruleRow.rawRuleArrayString;\n\nexport const gameCompletedSelector = (state: RootState) => state.ruleRow.gameCompleted;\n\nexport const layerIdsSelector = (state: RootState) => state.layers.layerIds;\n\nexport const layersByIdSelector = (state: RootState) => state.layers.layersById;\n\nexport const layersSelector = createSelector(\n  [layerIdsSelector, layersByIdSelector],\n  (layerIds, layersById) => layerIds.map((layerId) => layersById[layerId]),\n);\n\nexport const ruleArraysByIdSelector = (state: RootState) => state.ruleArrays.byId;\n\nexport const ruleArraysIdsSelector = (state: RootState) => state.ruleArrays.allIds;\n\nexport const ruleArraysSelector = createSelector(\n  [ruleArraysByIdSelector, ruleArraysIdsSelector],\n  (ruleArraysById, ruleArraysIds) => ruleArraysIds.map((id) => ruleArraysById[id]),\n);\n\nexport const boardObjectsArraysByIdSelector = (state: RootState) => state.boardObjectArrays.byId;\n\nexport const boardObjectsArraysIdsSelector = (state: RootState) => state.boardObjectArrays.allIds;\n\nexport const boardObjectsArraysSelector = createSelector(\n  [boardObjectsArraysByIdSelector, boardObjectsArraysIdsSelector],\n  (boardObjectsArraysById, boardObjectsArraysIds) =>\n    boardObjectsArraysIds.map((id) => boardObjectsArraysById[id]),\n);\n\nexport const gamesByIdSelector = (state: RootState) => state.games.byId;\n\nexport const gamesIdsSelector = (state: RootState) => state.games.allIds;\n\nexport const gamesSelector = createSelector(\n  [gamesByIdSelector, gamesIdsSelector],\n  (gamesById, gamesIds) => gamesIds.map((id) => gamesById[id]),\n);\n\nexport const exportedGamesSelector = createSelector(\n  [gamesByIdSelector, ruleArraysByIdSelector, boardObjectsArraysByIdSelector],\n  (gamesById, ruleArraysById, boardObjectsArraysById) =>\n    JSON.stringify({\n      id: shortid(),\n      version: FILE_VERSION,\n      games: gamesById,\n      ruleArrays: Object.entries(ruleArraysById).reduce<{\n        [id: string]: { id: string; name: string; stringified: string };\n      }>((acc, [id, curr]) => {\n        const { value: _, ...rest } = curr;\n        acc[id] = rest;\n        return acc;\n      }, {}),\n      boardObjectsArrays: Object.entries(boardObjectsArraysById).reduce<{\n        [id: string]: { id: string; name: string; value: BoardObjectType[] };\n      }>((acc, [id, curr]) => {\n        const { stringified: _, ...rest } = curr;\n        acc[id] = rest;\n        return acc;\n      }, {}),\n    } as ExportedFile),\n);\n\nexport const notificationsByIdSelector = (state: RootState) => state.notifications.byId;\n\nexport const notificationsIdsSelector = (state: RootState) => state.notifications.ids;\n\nexport const notificationsSelector = createSelector(\n  [notificationsByIdSelector, notificationsIdsSelector],\n  (notificationsById, notificationsIds) => notificationsIds.map((id) => notificationsById[id]),\n);\n\nexport const currGameIdSelector = (state: RootState) => state.game.currGameId;\n\nexport const currBoardObjectsArrayIndexSelector = (state: RootState) =>\n  state.game.currBoardObjectsArrayIndex;\n\nexport const orderSelector = (state: RootState) => state.ruleRow.order;\n\nexport const currGameNumConsecutiveSuccessfulMovesBeforePromptGuessSelector = (state: RootState) =>\n  state.games.byId[state.ruleRow.currGameId as string]\n    .numConsecutiveSuccessfulMovesBeforePromptGuess;\n","import React from 'react';\nimport { Box, Button, Grid, RadioButton, Text } from 'grommet';\nimport { Close, Trash } from 'grommet-icons';\nimport range from 'lodash/range';\nimport { colors, shapes } from '../constants';\nimport { positionToXy } from '../utils/atom-match';\nimport ShapeObject from './ShapeObject';\nimport { BoardObjectType } from '../@types';\n\nexport enum GridArea {\n  RADIO_BUTTONS = 'RADIO_BUTTONS',\n  COLORS = 'COLORS',\n  SHAPES = 'SHAPES',\n}\n\nconst BoardEditorObjectGridSelect: React.FunctionComponent<{\n  onDelete: () => void;\n  onClose: () => void;\n  onChange: (boardObject: BoardObjectType | undefined) => void;\n  pos: number;\n  boardObject?: BoardObjectType;\n}> = ({ onClose, onDelete, onChange, boardObject, pos }) => {\n  return (\n    <Box gap=\"small\" pad=\"small\">\n      <Box direction=\"row\">\n        <Box border={{ side: 'bottom' }} pad=\"small\" fill=\"horizontal\">\n          <Button label=\"Delete\" icon={<Trash />} onClick={onDelete} />\n        </Box>\n        <Box>\n          <Button icon={<Close />} onClick={onClose} />\n        </Box>\n      </Box>\n      {boardObject && (\n        <Grid\n          rows={['auto', 'auto']}\n          columns={['auto', 'auto']}\n          areas={[\n            {\n              name: GridArea.COLORS,\n              start: [1, 0],\n              end: [1, 0],\n            },\n            {\n              name: GridArea.SHAPES,\n              start: [0, 1],\n              end: [0, 1],\n            },\n            {\n              name: GridArea.RADIO_BUTTONS,\n              start: [1, 1],\n              end: [1, 1],\n            },\n          ]}\n        >\n          <Box gridArea={GridArea.COLORS} direction=\"row\" justify=\"stretch\">\n            {colors.map((color) => (\n              <Box justify=\"center\" align=\"center\" fill>\n                <Text>{color}</Text>\n              </Box>\n            ))}\n          </Box>\n          <Box gridArea={GridArea.SHAPES} direction=\"column\" justify=\"stretch\">\n            {shapes.map((shape) => (\n              <Box justify=\"center\" align=\"center\" fill>\n                <Text>{shape}</Text>\n              </Box>\n            ))}\n          </Box>\n          <Grid\n            columns={{\n              count: shapes.length,\n              size: 'auto',\n            }}\n            gridArea={GridArea.RADIO_BUTTONS}\n            gap=\"xxsmall\"\n          >\n            {range(colors.length * shapes.length).map((i) => {\n              const color = colors[i % colors.length];\n              const shape = shapes[Math.floor(i / colors.length)];\n              const name = `${color}-${shape}`;\n\n              return (\n                <Box justify=\"center\" align=\"center\" border=\"all\">\n                  <RadioButton\n                    name={name}\n                    key={name}\n                    onChange={() => {\n                      if (onChange) {\n                        onChange({\n                          color,\n                          shape,\n                          id: String(pos),\n                          x: positionToXy(pos).x,\n                          y: positionToXy(pos).y,\n                        });\n                      }\n                    }}\n                    checked={boardObject?.color === color && boardObject?.shape === shape}\n                    label={\n                      // eslint-disable-next-line react/jsx-wrap-multilines\n                      <Box height=\"xxsmall\" width=\"xxsmall\" justify=\"center\" align=\"center\">\n                        <ShapeObject shape={shape} color={color} />\n                      </Box>\n                    }\n                  />\n                </Box>\n              );\n            })}\n          </Grid>\n        </Grid>\n      )}\n    </Box>\n  );\n};\n\nexport default BoardEditorObjectGridSelect;\n","import { createAction } from 'typesafe-actions';\nimport shortid from 'shortid';\nimport { Optional } from 'utility-types';\n// eslint-disable-next-line import/no-cycle\nimport { ActionButton } from '../../@types';\nimport { CyLayer } from '../../constants/data-cy';\n\n// TODO: Consider a wrapper function that takes in a callback with id as its parameter\nexport const addLayer = createAction(\n  'layers/ADD_LAYER',\n  (\n    title: React.ReactNode,\n    description: React.ReactNode,\n    actionButtons: Optional<ActionButton, 'key'>[],\n    id?: string,\n    closeOnEsc = true,\n    closeOnClickOutside = true,\n    dataCyIdentifier?: CyLayer,\n  ) => {\n    const actionButtonsWithKeys: ActionButton[] = actionButtons.map(\n      (actionButton) =>\n        (actionButton.key === undefined\n          ? { ...actionButton, key: shortid() }\n          : actionButton) as ActionButton,\n    );\n    return {\n      title,\n      description,\n      actionButtons: actionButtonsWithKeys,\n      id: id || shortid(),\n      closeOnEsc,\n      closeOnClickOutside,\n      dataCyIdentifier,\n    };\n  },\n)();\n\nexport const removeLayer = createAction('layers/REMOVE_LAYER', (id: string) => ({ id }))();\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport Layer from './Layer';\nimport { layersSelector } from '../store/selectors';\nimport { removeLayer } from '../store/actions/layers';\nimport { RootAction } from '../store/actions';\n\nconst Layers: React.FunctionComponent = () => {\n  const layers = useSelector(layersSelector);\n  const dispatch: Dispatch<RootAction> = useDispatch();\n\n  return (\n    <>\n      {layers.map((layer) => (\n        <Layer\n          layer={layer}\n          onLayerClose={(layerId: string) => dispatch(removeLayer(layerId))}\n          key={layer.id}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default Layers;\n","import { createAction } from 'typesafe-actions';\nimport shortid from 'shortid';\n\nexport const addNotification = createAction(\n  'layers/ADD_NOTIFICATION',\n  (title: string, id: string = shortid()) => ({\n    title,\n    id,\n  }),\n)();\n\nexport const removeNotification = createAction('layers/REMOVE_NOTIFICATION', (id: string) => ({\n  id,\n}))();\n","import React from 'react';\nimport { Dispatch } from 'redux';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Box, Button, Heading, Layer } from 'grommet';\nimport { Close } from 'grommet-icons';\nimport { removeNotification } from '../store/actions/notifications';\nimport { RootAction } from '../store/actions';\nimport { notificationsByIdSelector } from '../store/selectors';\nimport { RootState } from '../store/reducers';\nimport { NotificationData } from '../@types/notifications';\n\nconst Notification: React.FunctionComponent<{\n  notificationId: string;\n}> = ({ notificationId }) => {\n  const dispatch: Dispatch<RootAction> = useDispatch();\n  const notification = useSelector<RootState, NotificationData>(\n    (state) => notificationsByIdSelector(state)[notificationId],\n  );\n\n  const close = () => dispatch(removeNotification(notification.id));\n\n  return (\n    <Layer\n      position=\"bottom\"\n      modal={false}\n      margin={{ vertical: 'medium', horizontal: 'small' }}\n      responsive={false}\n      plain\n    >\n      <Box\n        overflow=\"auto\"\n        align=\"center\"\n        direction=\"row\"\n        gap=\"small\"\n        justify=\"between\"\n        round=\"medium\"\n        elevation=\"medium\"\n        pad={{ vertical: 'xsmall', horizontal: 'large' }}\n        background=\"status-ok\"\n      >\n        <Heading level=\"3\">{notification.title}</Heading>\n        <Button icon={<Close size=\"medium\" />} onClick={close} />\n      </Box>\n    </Layer>\n  );\n};\n\nexport default Notification;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { notificationsIdsSelector } from '../store/selectors';\nimport Notification from './Notification';\n\nconst Notifications: React.FunctionComponent = () => {\n  const notificationsIds = useSelector(notificationsIdsSelector);\n\n  return (\n    <>\n      {notificationsIds.map((notificationsId) => (\n        <Notification notificationId={notificationsId} key={notificationsId} />\n      ))}\n    </>\n  );\n};\n\nexport default Notifications;\n","import { createAction, createAsyncAction } from 'typesafe-actions';\nimport shortid from 'shortid';\n// eslint-disable-next-line import/no-cycle\nimport { BoardObjectType, Game, RuleArray } from '../../@types';\n\nexport const loadGames = createAsyncAction(\n  [\n    'games/LOAD_GAMES_REQUEST',\n    (file: File, id: string = shortid()) => ({\n      file,\n      id,\n    }),\n  ],\n  [\n    'games/LOAD_GAMES_SUCCESS',\n    (\n      games: { [id: string]: Game },\n      ruleArrays: {\n        [id: string]: { id: string; name: string; stringified: string; value: RuleArray };\n      },\n      boardObjectsArrays: {\n        [id: string]: { id: string; name: string; stringified: string; value: BoardObjectType[] };\n      },\n      id: string,\n    ) => ({\n      games,\n      ruleArrays,\n      boardObjectsArrays,\n      id,\n    }),\n  ],\n  ['games/LOAD_GAMES_FAILURE', (error: Error, id: string) => ({ error, id })],\n)();\n\nexport const addGame = createAction(\n  'games/ADD_GAME',\n  (\n    name: string,\n    ruleArray: string,\n    boardObjectsArrays: string[],\n    useRandomBoardObjects: boolean,\n    numRandomBoardObjects: number,\n    numConsecutiveSuccessfulMovesBeforePromptGuess?: number,\n    id = shortid(),\n    restartIfNotCleared: boolean = false,\n  ) => ({\n    name,\n    id,\n    ruleArray,\n    boardObjectsArrays,\n    useRandomBoardObjects,\n    numRandomBoardObjects,\n    numConsecutiveSuccessfulMovesBeforePromptGuess,\n    restartIfNotCleared,\n  }),\n)();\n\nexport const setGameRuleArray = createAction(\n  'games/SET_GAME_RULE_ARRAY',\n  (id: string, ruleArray: string) => ({\n    id,\n    ruleArray,\n  }),\n)();\n\nexport const setGameBoardObjectsArrays = createAction(\n  'games/SET_GAME_BOARD_OBJECTS_ARRAYS',\n  (id: string, boardObjectsArrays: string[]) => ({\n    id,\n    boardObjectsArrays,\n  }),\n)();\n\nexport const enterGame = createAction('games/ENTER_GAME', (id: string) => ({ id }))();\n\nexport const removeGame = createAction('games/REMOVE_GAME', (id: string) => ({ id }))();\n","import React from 'react';\nimport ReactTooltip from 'react-tooltip';\nimport { FiCheck, FiCircle, FiSquare, FiStar, FiTriangle } from 'react-icons/fi';\nimport HappyFace from '../assets/smiley-face.png';\nimport bucketSvg from '../assets/bucket.svg';\nimport { cyShapeObject } from '../constants/data-cy-builders';\nimport { Color, Shape, VALID_SHAPES } from '../@types';\n\nexport type ShapeProps = {\n  ref: React.Ref<HTMLDivElement>;\n  shape: Shape;\n  className?: string;\n  shapeObjectId?: string;\n  onClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  debugInfo?: string;\n  color?: Color;\n  canDrag?: boolean;\n};\n\nconst shapesMapping: (color?: string) => { [shape in Shape]: JSX.Element | null } = (color) => ({\n  star: <FiStar size=\"100%\" color={color} />,\n  circle: <FiCircle size=\"100%\" color={color} />,\n  square: <FiSquare size=\"100%\" color={color} />,\n  triangle: <FiTriangle size=\"100%\" color={color} />,\n  happy: <img src={HappyFace} alt=\"happy-face\" height=\"100%\" />,\n  bucket: <img src={bucketSvg} alt=\"bucket\" height=\"100%\" />,\n  check: <FiCheck color=\"green\" size=\"100%\" />,\n  nothing: null,\n  '*': <div>*</div>,\n});\n\nconst ShapeObject = React.forwardRef<HTMLDivElement, ShapeProps>(\n  ({ shape, className, shapeObjectId, onClick, debugInfo, color, canDrag }, ref) => {\n    // noinspection HtmlUnknownBooleanAttribute\n    return (\n      <>\n        <div\n          data-tip\n          data-for={shapeObjectId}\n          className={className}\n          ref={ref}\n          data-cy={shapeObjectId && cyShapeObject(shapeObjectId)}\n          onClick={onClick}\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n            width: '100%',\n            height: '100%',\n            opacity: onClick && !canDrag && VALID_SHAPES.has(shape) ? 0.25 : 1,\n            cursor: onClick && !canDrag && VALID_SHAPES.has(shape) ? 'not-allowed' : undefined,\n          }}\n          data-shape={shape}\n        >\n          {shapesMapping(color)[shape]}\n        </div>\n        {debugInfo && (\n          <ReactTooltip id={shapeObjectId} type=\"error\">\n            <div>\n              {debugInfo.split('\\n').map((item) => {\n                return <div key={item}>{item}</div>;\n              })}\n            </div>\n          </ReactTooltip>\n        )}\n      </>\n    );\n  },\n);\n\nexport default ShapeObject;\n","export const cyShapeObject = (id: string) => `shape-object-${id}`;\n\nexport const cySelector = (value: string) => `[data-cy=${value}]`;\n","import { rows, cols } from '../constants';\nimport { Atom, BoardObjectType, Color, Shape } from '../@types';\n\nexport const xYToPosition = (x: number, y: number) => (y - 1) * (rows - 2) + x;\n\nexport const positionToXy = (position: number) => ({\n  x: ((position - 1) % (rows - 2)) + 1,\n  y: Math.floor((position - 1) / (cols - 2)) + 1,\n});\n\n/**\n * Check for match excluding the atom's functions. Intended to use for the filter function inside\n * the rule-row reducer.\n */\nexport default (boardObject: BoardObjectType, atomCounts: { [atomId: string]: number }) => (\n  atom: Atom,\n) =>\n  atomCounts[atom.id] > 0 &&\n  (atom.color === Color.ANY || atom.color === boardObject.color) &&\n  (atom.shape === Shape.ANY || atom.shape === boardObject.shape) &&\n  (Number.isNaN(atom.position) || xYToPosition(boardObject.x, boardObject.y) === atom.position);\n","import React, { useMemo } from 'react';\nimport { Grid, Box, BoxProps, Text, Button } from 'grommet';\nimport range from 'lodash/range';\nimport stringify from 'json-stringify-pretty-compact';\nimport { useDispatch } from 'react-redux';\nimport { rows, cols } from '../constants';\nimport ShapeObject from './ShapeObject';\nimport { Shape, BoardObjectType } from '../@types/index';\nimport { xYToPosition } from '../utils/atom-match';\nimport { addLayer } from '../store/actions/layers';\n\nconst indexToPos = (index: number) =>\n  (rows - 2) * (cols - 2) -\n  Math.floor(index / (cols - 2)) * (cols - 2) +\n  (index % (cols - 2)) -\n  (cols - 2) +\n  1;\n\nconst BoardPreview: React.FunctionComponent<{\n  boardObjects: BoardObjectType[];\n  width?: BoxProps['width'];\n  height?: BoxProps['height'];\n}> = ({ boardObjects, width = 'min(70vh, 100vw)', height = 'min(70vh, 100vw)' }) => {\n  const boardObjectByPos = useMemo(\n    () =>\n      boardObjects.reduce(\n        (acc, curr) => ({ ...acc, [xYToPosition(curr.x, curr.y)]: curr }),\n        {} as { [pos: number]: BoardObjectType | undefined },\n      ),\n    [boardObjects],\n  );\n  const dispatch = useDispatch();\n\n  return (\n    <Box>\n      <Box width={width} height={height}>\n        <Grid fill rows={['1fr', `${rows - 2}fr`, '1fr']} columns={['1fr', `${cols - 2}fr`, '1fr']}>\n          {range(9).map((j) =>\n            j === 4 ? (\n              <Grid\n                rows={range(rows - 2).map(() => '1fr')}\n                columns={range(cols - 2).map(() => '1fr')}\n                key={j}\n              >\n                {range((rows - 2) * (cols - 2)).map((i) => (\n                  <Box fill align=\"center\" justify=\"center\" border key={i}>\n                    {boardObjectByPos[indexToPos(i)] ? (\n                      <ShapeObject\n                        color={(boardObjectByPos[indexToPos(i)] as BoardObjectType).color}\n                        shape={(boardObjectByPos[indexToPos(i)] as BoardObjectType).shape}\n                      />\n                    ) : (\n                      <Text>{indexToPos(i)}</Text>\n                    )}\n                  </Box>\n                ))}\n              </Grid>\n            ) : j % 2 === 0 ? (\n              <Box fill border key={j}>\n                <ShapeObject shape={Shape.BUCKET} />\n              </Box>\n            ) : (\n              <Box fill border key={j} />\n            ),\n          )}\n        </Grid>\n      </Box>\n      <Button\n        label=\"Export\"\n        onClick={() =>\n          dispatch(\n            addLayer(\n              'Board Objects Array:',\n              <Box>\n                {stringify(boardObjects, { maxLength: 20 })\n                  .replace(/ /g, '\\u00A0')\n                  .split('\\n')\n                  .map((s) => (\n                    <Text>{s}</Text>\n                  ))}\n              </Box>,\n              [],\n            ),\n          )\n        }\n      />\n    </Box>\n  );\n};\n\nexport default BoardPreview;\n","import React, { useCallback } from 'react';\nimport { Box, Button, Heading, Paragraph } from 'grommet';\nimport { Close, View } from 'grommet-icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { Game } from '../@types';\nimport { RootAction } from '../store/actions';\nimport { enterGame, removeGame } from '../store/actions/games';\nimport { addLayer, removeLayer } from '../store/actions/layers';\nimport { RootState } from '../store/reducers';\nimport { boardObjectsArraysByIdSelector, ruleArraysByIdSelector } from '../store/selectors';\nimport BoardPreview from './BoardPreview';\n\nconst GameSelect: React.FunctionComponent<{\n  showEditButtons: boolean;\n  game: Game;\n}> = ({ showEditButtons, game }) => {\n  const dispatch: Dispatch<RootAction> = useDispatch();\n  const ruleArray = useSelector<\n    RootState,\n    undefined | { id: string; name: string; stringified: string; order?: number[] }\n  >((state) => (game.ruleArray ? ruleArraysByIdSelector(state)[game.ruleArray] : undefined));\n  const boardObjectsArraysById = useSelector(boardObjectsArraysByIdSelector);\n\n  return (\n    <Box direction=\"row\" key={game.id} align=\"center\">\n      {showEditButtons && (\n        <Button\n          icon={<View />}\n          onClick={() =>\n            dispatch(\n              addLayer(\n                `${game.name} Game Preview:`,\n                <Box height={{ min: 'auto' }}>\n                  <Heading>Rule Array:</Heading>\n                  {ruleArray?.stringified.split('\\n').map((line, i) => (\n                    // eslint-disable-next-line react/no-array-index-key\n                    <Paragraph key={i} margin=\"none\">\n                      {line}\n                    </Paragraph>\n                  ))}\n                  {ruleArray?.order && (\n                    <Paragraph> Order: JSON.stringify(ruleArray.order)</Paragraph>\n                  )}\n                  <Heading>Board Objects:</Heading>\n\n                  {game.useRandomBoardObjects\n                    ? `Using ${game.numRandomBoardObjects} random board objects...`\n                    : game.boardObjectsArrays.map((boardObjectsArray) => (\n                        // eslint-disable-next-line react/jsx-indent\n                        <BoardPreview\n                          key={boardObjectsArray}\n                          boardObjects={boardObjectsArraysById[boardObjectsArray].value}\n                        />\n                      ))}\n                </Box>,\n                [\n                  {\n                    key: 'close',\n                    label: 'Close',\n                    action: removeLayer('game-preview'),\n                  },\n                ],\n                'game-preview',\n              ),\n            )\n          }\n        />\n      )}\n      <Button\n        onClick={useCallback(() => dispatch(enterGame(game.id)), [dispatch, game.id])}\n        label={game.name}\n      />\n      {showEditButtons && (\n        <Button\n          onClick={() =>\n            dispatch(\n              addLayer(\n                'Delete Game?',\n                `Are you sure you want to delete ${game.name}?`,\n                [\n                  {\n                    key: 'yes',\n                    label: 'Yes',\n                    action: [removeLayer('delete-game'), removeGame(game.id)],\n                  },\n                  {\n                    key: 'no',\n                    label: 'No',\n                    action: removeLayer('delete-game'),\n                  },\n                ],\n                'delete-game',\n              ),\n            )\n          }\n          icon={<Close />}\n        />\n      )}\n    </Box>\n  );\n};\n\nexport default GameSelect;\n","import React from 'react';\nimport { Box, Button } from 'grommet';\nimport { Trash } from 'grommet-icons';\nimport GameSelect from './GameSelect';\nimport { Game } from '../@types';\n\nconst GameSelects: React.FunctionComponent<{\n  showEditButtons: boolean;\n  onDeleteAll: () => void;\n  games: Game[];\n}> = ({ showEditButtons, games, onDeleteAll }) => {\n  return (\n    <Box align=\"center\" gap=\"medium\">\n      {games.map((game) => (\n        <GameSelect key={game.id} game={game} showEditButtons={showEditButtons} />\n      ))}\n      {showEditButtons && <Button icon={<Trash />} label=\"Delete All\" onClick={onDeleteAll} />}\n    </Box>\n  );\n};\n\nexport default GameSelects;\n","import React from 'react';\nimport { CheckBox } from 'grommet';\nimport { useSelector } from 'react-redux';\nimport { boardObjectsArraysByIdSelector } from '../store/selectors';\nimport { RootState } from '../store/reducers';\n\nconst BoardObjectsArrayCheckBox: React.FunctionComponent<{\n  boardObjectsArrayId: string;\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  checked: boolean;\n}> = ({ boardObjectsArrayId, onChange, checked }) => {\n  const boardObjectsArrayName = useSelector<RootState, string>(\n    (state) => boardObjectsArraysByIdSelector(state)[boardObjectsArrayId].name,\n  );\n\n  return <CheckBox label={boardObjectsArrayName} onChange={onChange} checked={checked} />;\n};\n\nexport default BoardObjectsArrayCheckBox;\n","import {\n  Box,\n  Button,\n  CheckBox,\n  Form,\n  FormField,\n  Heading,\n  RadioButton,\n  Text,\n  TextInput,\n} from 'grommet';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport React, { useState } from 'react';\nimport { View } from 'grommet-icons';\nimport { RootAction } from '../store/actions';\nimport { addGame } from '../store/actions/games';\nimport { boardObjectsArraysSelector, ruleArraysSelector } from '../store/selectors';\nimport BoardObjectsArrayCheckBox from './BoardObjectsArrayCheckBox';\nimport { addLayer, removeLayer } from '../store/actions/layers';\nimport BoardPreview from './BoardPreview';\n\nconst AddGameForm: React.FunctionComponent = () => {\n  const dispatch: Dispatch<RootAction> = useDispatch();\n  const [name, setName] = useState('');\n  const boardObjectsArrays = useSelector(boardObjectsArraysSelector);\n  // The state may have ids that are either removed or missing after adding new ids.\n  // But that is ok because removed ids are ignored and\n  // missing ids are implemented to be treated as true.\n  // Whenever a checkbox state has changed, the id will be added to the state.\n  const [isCheckedBoardObjectsArrays, setIsCheckedBoardObjectsArrays] = useState<{\n    [id: string]: boolean;\n  }>(() =>\n    boardObjectsArrays.reduce(\n      (acc, { id }) => ({\n        ...acc,\n        [id]: true,\n      }),\n      {},\n    ),\n  );\n  const [selectedRuleArray, setSelectedRuleArray] = useState<string | undefined>(undefined);\n  const ruleArrays = useSelector(ruleArraysSelector);\n  const [useRandomBoardObjects, setUseRandomBoardObjects] = useState(false);\n  const [numRandomBoardObjects, setNumRandomBoardObjects] = useState(5);\n  const [\n    numConsecutiveSuccessfulMovesBeforePromptGuess,\n    setNumConsecutiveSuccessfulMovesBeforePromptGuess,\n  ] = useState<number>();\n\n  return (\n    <Box elevation=\"large\" align=\"center\" pad=\"medium\">\n      <Heading level=\"2\">Add a New Game</Heading>\n      <Form\n        onSubmit={() =>\n          dispatch(\n            addGame(\n              name,\n              selectedRuleArray as string,\n              boardObjectsArrays\n                .filter(({ id }) => isCheckedBoardObjectsArrays[id] ?? true)\n                .map(({ id }) => id),\n              useRandomBoardObjects,\n              numRandomBoardObjects,\n              numConsecutiveSuccessfulMovesBeforePromptGuess,\n              undefined,\n              true,\n            ),\n          )\n        }\n      >\n        <Box align=\"center\" gap=\"medium\">\n          <Box align=\"start\">\n            <FormField label=\"Game Name\">\n              <TextInput\n                required\n                value={name}\n                onChange={(event) => setName(event.target.value)}\n                placeholder=\"Name\"\n              />\n            </FormField>\n            <FormField label=\"New Rule Array\" name=\"RuleArray\" pad>\n              <Box>\n                {ruleArrays.length > 0 ? (\n                  <Box direction=\"column\" justify=\"between\">\n                    {ruleArrays.map((ruleArray) => (\n                      <Box direction=\"row\" key={ruleArray.id}>\n                        <Button\n                          onClick={() =>\n                            dispatch(\n                              addLayer(\n                                `${ruleArray.name} Rule Array Preview:`,\n                                `${ruleArray.stringified}\\n${\n                                  ruleArray.order ? `Order: ${JSON.stringify(ruleArray.order)}` : ''\n                                }`,\n                                [\n                                  {\n                                    key: 'close',\n                                    label: 'Close',\n                                    action: removeLayer('rule-array-preview'),\n                                  },\n                                ],\n                                'rule-array-preview',\n                              ),\n                            )\n                          }\n                          icon={<View />}\n                        />\n                        <RadioButton\n                          checked={selectedRuleArray === ruleArray.id}\n                          label={<Text>{ruleArray.name}</Text>}\n                          onChange={(event) =>\n                            event.target.checked && setSelectedRuleArray(ruleArray.id)\n                          }\n                          name=\"RuleArray\"\n                          required\n                        />\n                      </Box>\n                    ))}\n                  </Box>\n                ) : (\n                  <Text margin=\"small\" size=\"xsmall\" color=\"grey\">\n                    (Empty... Add Rule Arrays)\n                  </Text>\n                )}\n              </Box>\n            </FormField>\n            <FormField label=\"Number of Consecutive Moves Before Prompt Guess\">\n              <TextInput\n                type=\"number\"\n                value={numConsecutiveSuccessfulMovesBeforePromptGuess}\n                onChange={({ target: { value } }) =>\n                  setNumConsecutiveSuccessfulMovesBeforePromptGuess(Number(value.trim()))\n                }\n              />\n            </FormField>\n            <CheckBox\n              label=\"Use Random Board Objects\"\n              checked={useRandomBoardObjects}\n              onChange={({ target: { checked } }) => setUseRandomBoardObjects(checked)}\n            />\n            {useRandomBoardObjects ? (\n              <FormField label=\"Num Random Objects Per Display\">\n                <TextInput\n                  type=\"number\"\n                  value={numRandomBoardObjects}\n                  onChange={({ target: { value } }) =>\n                    setNumRandomBoardObjects(Number(value.trim()))\n                  }\n                />\n              </FormField>\n            ) : (\n              <FormField label=\"Board Objects Arrays\">\n                <Box gap=\"none\">\n                  {boardObjectsArrays.length > 0 ? (\n                    boardObjectsArrays.map((boardObjectsArray) => (\n                      <Box direction=\"row\" justify=\"start\" key={boardObjectsArray.id}>\n                        <Button\n                          onClick={() =>\n                            dispatch(\n                              addLayer(\n                                `${boardObjectsArray.name} Board Objects Array Preview:`,\n                                <BoardPreview boardObjects={boardObjectsArray.value} />,\n                                [\n                                  {\n                                    key: 'close',\n                                    label: 'Close',\n                                    action: removeLayer('board-objects-array-preview'),\n                                  },\n                                ],\n                                'board-objects-array-preview',\n                              ),\n                            )\n                          }\n                          icon={<View />}\n                        />\n                        <BoardObjectsArrayCheckBox\n                          boardObjectsArrayId={boardObjectsArray.id}\n                          checked={isCheckedBoardObjectsArrays[boardObjectsArray.id] ?? true}\n                          onChange={({ target: { checked } }) =>\n                            setIsCheckedBoardObjectsArrays((isCheckedBoardObjectsArrays) => ({\n                              ...isCheckedBoardObjectsArrays,\n                              [boardObjectsArray.id]: checked,\n                            }))\n                          }\n                        />\n                      </Box>\n                    ))\n                  ) : (\n                    <Text margin=\"small\" size=\"xsmall\" color=\"grey\">\n                      (Empty... Add Board Objects Arrays)\n                    </Text>\n                  )}\n                </Box>\n              </FormField>\n            )}\n          </Box>\n          <Button primary type=\"submit\" label=\"Add Game\" />\n        </Box>\n      </Form>\n    </Box>\n  );\n};\n\nexport default AddGameForm;\n","import { createAction, createAsyncAction } from 'typesafe-actions';\nimport shortid from 'shortid';\n// eslint-disable-next-line import/no-cycle\nimport { RuleArray } from '../../@types';\n\nexport const addRuleArray = createAsyncAction(\n  [\n    'rule-arrays/ADD_RULE_ARRAY_REQUEST',\n    (name: string, rawRuleArray: string, rawOrder?: string, id: string = shortid()) => ({\n      name,\n      rawRuleArray,\n      rawOrder,\n      id,\n    }),\n  ],\n  [\n    'rule-arrays/ADD_RULE_ARRAY_SUCCESS',\n    (id: string, name: string, ruleArray: RuleArray, stringified: string, order?: number[]) => ({\n      id,\n      name,\n      ruleArray,\n      stringified,\n      order,\n    }),\n  ],\n  ['rule-arrays/ADD_RULE_ARRAY_FAILURE', (error: Error) => ({ error })],\n)();\n\nexport const removeRuleArray = createAction('rule-arrays/REMOVE_RULE_ARRAY', (id: string) => ({\n  id,\n}))();\n","import { Box, Button, Form, FormField, Heading, TextArea, TextInput } from 'grommet';\nimport { useDispatch } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport React, { useCallback, useState } from 'react';\nimport { RootAction } from '../store/actions';\nimport { addRuleArray } from '../store/actions/rule-arrays';\n\nconst AddRuleArrayForm: React.FunctionComponent = () => {\n  const [name, setName] = useState('');\n  const [ruleArray, setRuleArray] = useState('');\n  const [order, setOrder] = useState('');\n  const dispatch: Dispatch<RootAction> = useDispatch();\n\n  return (\n    <Box elevation=\"large\" align=\"center\" pad=\"medium\">\n      <Heading level=\"2\">Add a New Rule Array</Heading>\n      <Form\n        onSubmit={() =>\n          dispatch(\n            addRuleArray.request(name, ruleArray, order.trim().length > 0 ? order : undefined),\n          )\n        }\n      >\n        <Box align=\"center\">\n          <Box align=\"start\">\n            <FormField label=\"Name\">\n              <TextInput\n                placeholder=\"Name\"\n                onChange={useCallback((e) => setName(e.target.value), [])}\n                value={name}\n              />\n            </FormField>\n            <FormField label=\"Order\">\n              <TextInput value={order} onChange={({ target: { value } }) => setOrder(value)} />\n            </FormField>\n            <FormField label=\"New Rule Array\">\n              <TextArea\n                required\n                value={ruleArray}\n                onChange={useCallback((e) => setRuleArray(e.target.value), [])}\n                size=\"small\"\n                rows={20}\n                cols={50}\n                wrap=\"off\"\n                placeholder=\"(10,square,*,*,[1,2]) (10,*,blue,10,[2,3])\n(*,*,*,*,[ps,pc])\n(*,*,*,*,[(p+1)%4])\"\n              />\n            </FormField>\n          </Box>\n          <Button type=\"submit\" label=\"Add Rule Array\" primary />\n        </Box>\n      </Form>\n    </Box>\n  );\n};\n\nexport default AddRuleArrayForm;\n","import { createAction, createAsyncAction } from 'typesafe-actions';\n// eslint-disable-next-line import/no-cycle\nimport { BoardObjectType } from '../../@types';\n\nexport const addBoardObjectsArray = createAsyncAction(\n  [\n    'board-objects-arrays/ADD_BOARD_OBJECTS_ARRAY',\n    (name: string, boardObjectsArrayString: string, addToAllGames: boolean = false) => ({\n      name,\n      boardObjectsArrayString,\n      addToAllGames,\n    }),\n  ],\n  [\n    'board-objects-arrays/ADD_BOARD_OBJECTS_ARRAY_SUCCESS',\n    (\n      id: string,\n      name: string,\n      boardObjectsArray: BoardObjectType[],\n      stringified: string,\n      addToAllGames: boolean = false,\n    ) => ({\n      id,\n      boardObjectsArray,\n      stringified,\n      name,\n      addToAllGames,\n    }),\n  ],\n  [\n    'board-objects-arrays/ADD_BOARD_OBJECTS_ARRAY_FAILURE',\n    (error: Error, boardObjectsArrayString: string) => ({ error, boardObjectsArrayString }),\n  ],\n)();\n\nexport const removeBoardObjectsArray = createAction(\n  'board-objects-arrays/REMOVE_BOARD_OBJECTS_ARRAY',\n  (id: string) => ({\n    id,\n  }),\n)();\n","export const CY_GAME = 'game';\n\nexport const CY_NO_MORE_MOVES = 'no-more-moves';\n\nexport enum CyLayer {\n  GUESS_PROMPT = 'CY_LAYER_GUESS_PROMPT',\n}\n","import React from 'react';\nimport { Box, DropButton, Text } from 'grommet';\nimport ShapeObject from './ShapeObject';\nimport { BoardObjectType, Color, Shape } from '../@types';\nimport { positionToXy } from '../utils/atom-match';\nimport BoardEditorObjectGridSelect from './BoardEditorObjectGridSelect';\n\nconst BoardEditorObject: React.FunctionComponent<{\n  pos: number;\n  boardObject?: BoardObjectType;\n  onChange: (boardObject: BoardObjectType | undefined) => void;\n}> = ({ pos, boardObject, onChange }) => {\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <DropButton\n      fill\n      plain\n      onOpen={() => {\n        setOpen(true);\n        if (!boardObject) {\n          onChange({\n            color: Color.RED,\n            shape: Shape.SQUARE,\n            id: String(pos),\n            x: positionToXy(pos).x,\n            y: positionToXy(pos).y,\n          });\n        }\n      }}\n      onClose={() => setOpen(false)}\n      open={open}\n      label={\n        // eslint-disable-next-line react/jsx-wrap-multilines\n        <Box fill align=\"center\" justify=\"center\" border>\n          {boardObject ? (\n            <ShapeObject color={boardObject.color} shape={boardObject.shape} />\n          ) : (\n            <Text>{pos}</Text>\n          )}\n        </Box>\n      }\n      dropAlign={{ top: 'bottom', left: 'left' }}\n      dropContent={\n        // eslint-disable-next-line react/jsx-wrap-multilines\n        <BoardEditorObjectGridSelect\n          onClose={() => {\n            setOpen(false);\n          }}\n          onDelete={() => {\n            onChange(undefined);\n            setOpen(false);\n          }}\n          onChange={onChange}\n          pos={pos}\n          boardObject={boardObject}\n        />\n      }\n    />\n  );\n};\n\nexport default BoardEditorObject;\n","import React, { useState } from 'react';\nimport { Box, BoxProps, Button, Grid } from 'grommet';\nimport range from 'lodash/range';\nimport { BoardObjectType, Shape } from '../@types/index';\nimport { cols, rows } from '../constants';\nimport { xYToPosition } from '../utils/atom-match';\nimport BoardEditorObject from './BoardEditorObject';\nimport ShapeObject from './ShapeObject';\n\nconst indexToPos = (index: number) =>\n  (rows - 2) * (cols - 2) -\n  Math.floor(index / (cols - 2)) * (cols - 2) +\n  (index % (cols - 2)) -\n  (cols - 2) +\n  1;\n\nconst BoardEditor: React.FunctionComponent<{\n  boardObjects?: BoardObjectType[];\n  onLoad: (boardObjectsArray: BoardObjectType[]) => void;\n  width?: BoxProps['width'];\n  height?: BoxProps['height'];\n}> = ({ boardObjects = [], onLoad, width = 'min(70vh, 100vw)', height = 'min(70vh, 100vw)' }) => {\n  const [boardObjectsByPos, setBoardObjectByPos] = useState<{\n    [pos: number]: BoardObjectType | undefined;\n  }>(() =>\n    boardObjects.reduce((acc, curr) => ({ ...acc, [xYToPosition(curr.x, curr.y)]: curr }), {}),\n  );\n\n  return (\n    <Grid fill rows={['auto', 'min-content']}>\n      <Box width={width} height={height}>\n        <Grid fill rows={['1fr', `${rows - 2}fr`, '1fr']} columns={['1fr', `${cols - 2}fr`, '1fr']}>\n          {range(9).map((j) =>\n            j === 4 ? (\n              <Grid\n                rows={range(rows - 2).map(() => '1fr')}\n                columns={range(cols - 2).map(() => '1fr')}\n                key={j}\n              >\n                {range((rows - 2) * (cols - 2)).map((i) => (\n                  <BoardEditorObject\n                    key={i}\n                    pos={indexToPos(i)}\n                    boardObject={boardObjectsByPos[indexToPos(i)]}\n                    onChange={(boardObject) =>\n                      setBoardObjectByPos((state) => ({\n                        ...state,\n                        [indexToPos(i)]: boardObject,\n                      }))\n                    }\n                  />\n                ))}\n              </Grid>\n            ) : j % 2 === 0 ? (\n              <Box fill border key={j}>\n                <ShapeObject shape={Shape.BUCKET} />\n              </Box>\n            ) : (\n              <Box fill border key={j} />\n            ),\n          )}\n        </Grid>\n      </Box>\n      <Button\n        label=\"Load\"\n        onClick={() =>\n          onLoad(\n            Object.values(boardObjectsByPos).filter((b): b is BoardObjectType => b !== undefined),\n          )\n        }\n      />\n    </Grid>\n  );\n};\n\nexport default BoardEditor;\n","import { Box, Button, CheckBox, Form, FormField, Heading, TextArea, TextInput } from 'grommet';\nimport React, { useState } from 'react';\nimport { Dispatch } from 'redux';\nimport { useDispatch } from 'react-redux';\nimport stringify from 'json-stringify-pretty-compact';\nimport { addBoardObjectsArray } from '../store/actions/board-objects-arrays';\nimport { RootAction } from '../store/actions';\nimport { addLayer, removeLayer } from '../store/actions/layers';\nimport BoardEditor from './BoardEditor';\n\nconst AddBoardObjectsForm: React.FunctionComponent = () => {\n  const [boardObjectsArray, setBoardObjectsArray] = useState('');\n  const [name, setName] = useState('');\n  const dispatch: Dispatch<RootAction> = useDispatch();\n  const [addToAllGames, setAddToAllGames] = useState(false);\n\n  return (\n    <Box elevation=\"large\" align=\"center\" pad=\"medium\">\n      <Heading level=\"2\">Add a New Custom Board Objects Array</Heading>\n      <Form\n        onSubmit={() =>\n          dispatch(addBoardObjectsArray.request(name, boardObjectsArray, addToAllGames))\n        }\n      >\n        <Box align=\"center\">\n          <Box align=\"start\">\n            <FormField label=\"Name\">\n              <TextInput\n                onChange={(e) => setName(e.target.value)}\n                value={name}\n                placeholder=\"Name\"\n                required\n              />\n            </FormField>\n            <Button\n              label=\"Use Interactive Board Editor\"\n              onClick={() =>\n                dispatch(\n                  addLayer(\n                    'Board Editor',\n                    <BoardEditor\n                      onLoad={(boardObjects) => {\n                        setBoardObjectsArray(stringify(boardObjects, { maxLength: 20 }));\n                        dispatch(removeLayer('board-editor'));\n                      }}\n                      key={boardObjectsArray}\n                    />,\n                    [\n                      {\n                        key: 'discard',\n                        label: 'Discard',\n                        action: addLayer(\n                          'Unsaved board',\n                          'Are you sure you want to discard',\n                          [\n                            {\n                              key: 'yes',\n                              label: 'Yes',\n                              action: [removeLayer('board-editor'), removeLayer('confirm-discard')],\n                            },\n                            { key: 'no', label: 'No', action: removeLayer('confirm-discard') },\n                          ],\n                          'confirm-discard',\n                        ),\n                      },\n                    ],\n                    'board-editor',\n                    false,\n                    false,\n                  ),\n                )\n              }\n            />\n            <FormField label=\"New Board Objects\" name=\"BoardObjects\" pad>\n              <TextArea\n                required\n                rows={20}\n                cols={50}\n                wrap=\"off\"\n                onChange={(e) => setBoardObjectsArray(e.target.value)}\n                value={boardObjectsArray}\n                size=\"small\"\n                placeholder={`Custom Board Objects (JSON format):\nBoard Object Shape:\n{\n  id?: string; // If omitted, id will be position.\n  color: Color;\n  shape: Shape;\n  x: number;\n  y: number;\n}\n\nArray Example:\n[\n  {\n    \"color\": \"red\",\n    \"id\": \"1\",\n    \"shape\": \"square\",\n    \"x\": 1,\n    \"y\": 2\n  },\n  {\n    \"color\": \"blue\",\n    \"id\": \"2\",\n    \"shape\": \"circle\",\n    \"x\": 2,\n    \"y\": 3\n  }\n]\n`}\n              />\n            </FormField>\n            <FormField label=\"Add to all Games\">\n              <CheckBox\n                checked={addToAllGames}\n                onChange={(event) => setAddToAllGames(event.target.checked)}\n              />\n            </FormField>\n          </Box>\n          <Button primary type=\"submit\" label=\"Add Board Objects Array\" />\n        </Box>\n      </Form>\n    </Box>\n  );\n};\n\nexport default AddBoardObjectsForm;\n","import React, { useState } from 'react';\nimport { Box, CheckBox, Heading, Paragraph, Text } from 'grommet';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { RootAction } from '../store/actions';\nimport { gamesSelector } from '../store/selectors';\nimport { removeGame } from '../store/actions/games';\nimport { addLayer, removeLayer } from '../store/actions/layers';\nimport GameSelects from '../components/GameSelects';\nimport AddGameForm from '../components/AddGameForm';\nimport GamesFilesButtons from '../components/GameFilesButtons';\nimport AddRuleArrayForm from '../components/AddRuleArrayForm';\nimport AddBoardObjectsForm from '../components/AddBoardObjectsArrayForm';\nimport { EDIT_GAMES_ENABLED } from '../constants/env';\n\nconst EntrancePage = () => {\n  const dispatch: Dispatch<RootAction> = useDispatch();\n  const [showEditGames, setShowEditGames] = useState(EDIT_GAMES_ENABLED && true);\n  const games = useSelector(gamesSelector);\n\n  return (\n    <Box direction=\"column\" align=\"center\" gap=\"medium\" pad=\"medium\">\n      <Box align=\"center\" elevation=\"large\" fill>\n        <Box background=\"brand\" fill align=\"center\" pad=\"medium\" justify=\"center\">\n          <Heading>RuleGame Challenge</Heading>\n          <Paragraph fill>\n            Welcome to the RuleGame challenge. There are {games.length} different rules. Each rule\n            describes an allowed way of clearing some colored objects from a game board. To clear an\n            object, you must grab it with the mouse, and drag it to the correct bucket. When you\n            release it at the correct bucket, the bucket smiles, and the object’s place turns into a\n            check mark. If you release it at the wrong bucket, it jumps back onto the board where it\n            was. When you hover over an object, the little hand will tell you that it can move.\n            After you have cleared an entire display, you can give up, or ask for a new display.\n            After you have cleared a few displays without too many errors, you can take a chance to\n            guess at the rule. Please be patient after you guess because we require human judges to\n            review your guesses.\n          </Paragraph>\n        </Box>\n        <Box pad=\"medium\">\n          <Heading>Enter a Game</Heading>\n          <Box pad=\"small\" fill align=\"center\" justify=\"center\">\n            {games.length > 0 ? (\n              <GameSelects\n                showEditButtons={showEditGames}\n                onDeleteAll={() =>\n                  dispatch(\n                    addLayer(\n                      'Delete All Games?',\n                      `Are you sure you want to delete all games?`,\n                      [\n                        {\n                          key: 'yes',\n                          label: 'Yes',\n                          action: [\n                            removeLayer('delete-all-games'),\n                            ...games.map((game) => removeGame(game.id)),\n                          ],\n                        },\n                        {\n                          key: 'no',\n                          label: 'No',\n                          action: removeLayer('delete-all-games'),\n                        },\n                      ],\n                      'delete-all-games',\n                    ),\n                  )\n                }\n                games={games}\n              />\n            ) : (\n              <Text>(Empty... Add a Game Below)</Text>\n            )}\n          </Box>\n        </Box>\n      </Box>\n      {EDIT_GAMES_ENABLED && (\n        <Box gap=\"medium\" align=\"center\">\n          <CheckBox\n            checked={showEditGames}\n            label=\"Edit Games\"\n            onChange={(event) => setShowEditGames(event.target.checked)}\n          />\n          <GamesFilesButtons />\n        </Box>\n      )}\n      {showEditGames && (\n        <Box direction=\"row\" gap=\"medium\" align=\"stretch\">\n          <AddGameForm />\n          <AddRuleArrayForm />\n          <AddBoardObjectsForm />\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default EntrancePage;\n","export const DEBUG_ENABLED: boolean = process.env.REACT_APP_DEBUG_MODE_ENABLED === 'true';\nexport const EDIT_GAMES_ENABLED: boolean = process.env.REACT_APP_EDIT_GAMES_ENABLED === 'true';\n","import { createAction } from 'typesafe-actions';\n// eslint-disable-next-line import/no-cycle\nimport { Atom, BoardObjectType, DropAttempt } from '../../@types';\n\nexport const move = createAction('rule-row/MOVE', (dropAttempt: DropAttempt) => ({\n  dropAttempt,\n}))();\n\nexport const touch = createAction('rule-row/TOUCH', (boardObjectId: string) => ({\n  boardObjectId,\n}))();\n\nexport const removeBoardObject = createAction(\n  'rule-row/REMOVE_BOARD_OBJECT',\n  (boardObjectId: string) => ({ boardObjectId }),\n)();\n\nexport const loadRuleArray = createAction(\n  'rule-row/LOAD_RULE_ARRAY',\n  (\n    boardObjects: BoardObjectType[],\n    ruleArray: Atom[][],\n    gameId: string,\n    rawRuleArrayString?: string,\n    order?: number[],\n    restartIfNotCleared: boolean = false,\n  ) => ({\n    boardObjects,\n    ruleArray,\n    gameId,\n    rawRuleArrayString,\n    order,\n    restartIfNotCleared,\n  }),\n)();\n\nexport const setRuleRowIndex = createAction('rule-row/SET_RULE_ROW_INDEX', (index: number) => ({\n  index,\n}))();\n\nexport const endRuleArray = createAction('rule-row/END_RULE_ARRAY')();\n\nexport const endRuleRow = createAction('rule-row/END_RULE_ROW')();\n\nexport const resumeGame = createAction('rule-row/RESUME_GAME')();\n\nexport const enableDebugMode = createAction('rule-row/ENABLE_DEBUG_MODE')();\n\nexport const disableDebugMode = createAction('rule-row/DISABLE_DEBUG_MODE')();\n\nexport const completeGame = createAction('rule-row/COMPLETE_GAME')();\n","import React from 'react';\nimport { useDrag } from 'react-dnd';\nimport styled from 'styled-components';\nimport { BoardObjectItem, Shape } from '../@types';\nimport ShapeObject from './ShapeObject';\n\nexport type BoardObjectProps = {\n  className?: string;\n  item: BoardObjectItem;\n  onClick: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  shape: Shape;\n  canDrag?: boolean;\n};\n\nconst StyledShapeObject = styled(ShapeObject)<{ canDrag: boolean }>`\n  width: 100%;\n  height: 100%;\n  cursor: ${({ canDrag }) => (canDrag ? 'grab' : 'unset')};\n`;\n\nconst BoardObject = ({\n  className,\n  item,\n  onClick,\n  shape,\n  canDrag: canDragProp = true,\n}: BoardObjectProps): JSX.Element => {\n  const canDrag = canDragProp && item.buckets !== undefined && item.buckets.size > 0;\n  const [, ref] = useDrag({\n    item,\n    canDrag,\n  });\n  return (\n    <StyledShapeObject\n      shape={shape}\n      className={className}\n      onClick={onClick}\n      ref={ref}\n      canDrag={canDrag}\n      shapeObjectId={item.id}\n      debugInfo={item.debugInfo}\n    />\n  );\n};\n\nexport default BoardObject;\n","import React from 'react';\nimport { useDrop } from 'react-dnd';\nimport styled from 'styled-components';\nimport { BoardObjectItem, BucketType, Shape } from '../@types';\nimport ShapeObject from './ShapeObject';\n\nexport type BucketProps = {\n  className?: string;\n  onDrop: (item: BoardObjectItem) => void;\n  canDrop: (item: BoardObjectItem) => boolean;\n  dropped: boolean;\n  bucket: BucketType;\n};\n\nconst StyledBucket = styled(ShapeObject)<{ isOver: boolean }>`\n  filter: grayscale(${(props) => (props.isOver ? 0.5 : 0)});\n`;\n\nconst Bucket = ({ className, onDrop, canDrop, dropped, bucket }: BucketProps): JSX.Element => {\n  const [{ isOver }, ref] = useDrop({\n    canDrop,\n    drop: onDrop,\n    accept: 'object',\n    collect: (monitor) => ({\n      isOver: monitor.isOver(),\n    }),\n  });\n  return (\n    <StyledBucket\n      ref={ref}\n      className={className}\n      isOver={isOver}\n      shape={dropped ? Shape.HAPPY : Shape.BUCKET}\n      shapeObjectId={bucket.id}\n    />\n  );\n};\n\nexport default Bucket;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { BoardObjectItem, BoardObjectType, BucketPosition, BucketType } from '../@types';\nimport { buckets, cols, rows } from '../constants';\nimport BoardObject from './BoardObject';\nimport Bucket from './Bucket';\n\nconst StyledBoard = styled.div<{}>`\n  display: grid;\n  grid-template-rows: repeat(${rows}, ${100 / rows}%);\n  grid-template-columns: repeat(${cols}, ${100 / cols}%);\n  height: 100%;\n  width: 100%;\n  position: relative;\n  &:after {\n    content: '';\n    display: block;\n    padding-bottom: 100%;\n  }\n`;\n\nconst StyledBoardObject = styled(BoardObject)<BoardObjectType>`\n  grid-column: ${(boardObject) => boardObject.x + 1};\n  grid-row: ${(boardObject) => rows - boardObject.y};\n  color: ${(boardObject) => boardObject.color};\n`;\n\nconst StyledBucket = styled(Bucket)<BucketType>`\n  grid-column: ${(bucketCoord) => bucketCoord.x + 1};\n  grid-row: ${(bucketCoord) => rows - bucketCoord.y};\n`;\n\ntype BoardProps = {\n  onDrop: (bucketCoord: BucketType) => (droppedItem: BoardObjectItem) => void;\n  boardObjects: BoardObjectType[];\n  boardObjectsToBuckets: {\n    [boardObjectId: string]: Set<BucketPosition>;\n  };\n  className?: string;\n  paused: boolean;\n  disabledBucket: BucketPosition | undefined;\n  onBoardObjectClick: (boardObject: BoardObjectType) => void;\n  boardObjectsToDebugInfo?: { [boardObjectId: string]: string };\n};\n\nconst Board = ({\n  onDrop,\n  boardObjects,\n  boardObjectsToBuckets,\n  className,\n  paused,\n  onBoardObjectClick,\n  disabledBucket,\n  boardObjectsToDebugInfo,\n}: BoardProps): JSX.Element => {\n  return (\n    <StyledBoard className={className}>\n      {boardObjects.map((boardObject) => (\n        <StyledBoardObject\n          {...boardObject}\n          key={`${boardObject.x}-${boardObject.y}`}\n          item={{\n            ...boardObject,\n            type: 'object',\n            buckets: boardObjectsToBuckets[boardObject.id],\n            debugInfo: boardObjectsToDebugInfo && boardObjectsToDebugInfo[boardObject.id],\n          }}\n          onClick={() => !disabledBucket && onBoardObjectClick(boardObject)}\n        />\n      ))}\n      {buckets.map((bucket) => (\n        <StyledBucket\n          {...bucket}\n          key={`${bucket.x}-${bucket.y}`}\n          onDrop={onDrop(bucket)}\n          canDrop={() => !paused}\n          dropped={disabledBucket === bucket.pos}\n          bucket={bucket}\n        />\n      ))}\n    </StyledBoard>\n  );\n};\n\nexport default Board;\n","import { createAction } from 'typesafe-actions';\n// eslint-disable-next-line import/no-cycle\nimport { Page } from '../../@types';\n\nexport const goToPage = createAction('page/GO_TO_PAGE', (page: Page) => ({ page }))();\n","import { createAction } from 'typesafe-actions';\n\nexport const nextBoardObjectsArray = createAction('game/NEXT_BOARD_OBJECTS_ARRAY', () => ({}))();\n\nexport const setGameId = createAction('game/SET_GAME_ID', (gameId: string) => ({ gameId }))();\n\nexport const setBoardObjectsArray = createAction(\n  'game/SET_BOARD_OBJECTS_ARRAY',\n  (index: number) => ({ index }),\n)();\n","import React, { useState } from 'react';\nimport { Button, Form, FormField, Heading, TextInput } from 'grommet';\nimport { RULE_EMAIL_ADDRESS } from '../constants';\n\nconst GuessRuleForm: React.FunctionComponent<{ gameId: string }> = ({ gameId }) => {\n  const [ruleGuess, setRuleGuess] = useState('');\n\n  return (\n    <Form\n      onSubmit={() => {\n        const a = document.createElement('a');\n        a.href = `mailto:${RULE_EMAIL_ADDRESS}?subject=Rule Array Guess (GameID: ${gameId})&body=${ruleGuess}`;\n        a.click();\n      }}\n    >\n      <Heading>Guess Rule</Heading>\n      <FormField label=\"Describe the rule\">\n        <TextInput\n          name=\"body\"\n          value={ruleGuess}\n          onChange={({ target: { value } }) => setRuleGuess(value)}\n        />\n      </FormField>\n      <Button type=\"submit\" label=\"Submit\" />\n    </Form>\n  );\n};\n\nexport default GuessRuleForm;\n","import { RootState } from '../reducers';\n\nexport const numConsecutiveSuccessfulMovesSelector = (state: RootState) =>\n  state.ruleRow.numConsecutiveSuccessfulMoves;\n\nexport const currGameIdSelector = (state: RootState) => state.ruleRow.currGameId;\n\nexport const restartIfNotClearedSelector = (state: RootState) => state.ruleRow.restartIfNotCleared;\n\nexport const numRuleRowsSelector = (state: RootState) => state.ruleRow.numRuleRows;\n\nexport const noSuccessfulMovesSelector = (state: RootState) =>\n  state.ruleRow.ruleArrayInfos.every((ruleArrayInfo) => ruleArrayInfo.successfulMoves === 0);\n\nexport const currGameNameSelector = (state: RootState) =>\n  state.ruleRow.currGameId && state.games.byId[state.ruleRow.currGameId].name;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Box, Button, CheckBox, Grid, Heading, Text } from 'grommet';\nimport { Dispatch } from 'redux';\nimport { BoardObjectItem, BucketType } from '../@types';\nimport { disableDebugMode, enableDebugMode, move, touch } from '../store/actions/rule-row';\nimport Board from './Board';\nimport {\n  allChecksSelector,\n  boardObjectsSelector,\n  boardObjectsToDebugInfoSelector,\n  boardObjectToBucketsSelector,\n  debugModeSelector,\n  disabledBucketSelector,\n  gameCompletedSelector,\n  historyDebugInfoSelector,\n  orderSelector,\n  pausedSelector,\n  rawAtomsSelector,\n  ruleRowIndexSelector,\n} from '../store/selectors';\nimport { RootAction } from '../store/actions';\nimport { goToPage } from '../store/actions/page';\nimport { nextBoardObjectsArray } from '../store/actions/game';\nimport GuessRuleForm from './GuessRuleForm';\nimport { CY_GAME, CY_NO_MORE_MOVES } from '../constants/data-cy';\nimport { DEBUG_ENABLED } from '../constants/env';\nimport { currGameIdSelector, currGameNameSelector } from '../store/selectors/rule-row';\n\nenum GridAreaName {\n  HEADING = 'HEADING',\n  DEBUG_TOGGLE = 'DEBUG_TOGGLE',\n  HISTORY = 'HISTORY',\n  RULE_ARRAY = 'RULE_ARRAY',\n  BOARD = 'BOARD',\n  FORM = 'FORM',\n}\n\nconst Game: React.FunctionComponent<{\n  className?: string;\n}> = ({ className }) => {\n  const dispatch: Dispatch<RootAction> = useDispatch();\n\n  const disabledBucket = useSelector(disabledBucketSelector);\n  const boardObjects = useSelector(boardObjectsSelector);\n  const boardObjectsToBuckets = useSelector(boardObjectToBucketsSelector);\n  const paused = useSelector(pausedSelector);\n  const boardObjectsToDebugInfo = useSelector(boardObjectsToDebugInfoSelector);\n  const debugModeEnabled = useSelector(debugModeSelector);\n  const historyDebugInfo = useSelector(historyDebugInfoSelector);\n  const ruleRowIndex = useSelector(ruleRowIndexSelector);\n  const rawAtoms = useSelector(rawAtomsSelector);\n  const gameCompleted = useSelector(gameCompletedSelector);\n  const order = useSelector(orderSelector);\n  const gameId = useSelector(currGameIdSelector);\n  const allChecked = useSelector(allChecksSelector);\n  const gameName = useSelector(currGameNameSelector);\n\n  return (\n    <Box pad=\"small\" data-cy={CY_GAME}>\n      <Grid\n        rows={['auto', 'auto', 'min(70vh, 100vw)', 'auto']}\n        columns={['auto', 'min(70vh, 100vw)', 'auto']}\n        areas={[\n          {\n            name: GridAreaName.HEADING,\n            start: [0, 0],\n            end: [2, 0],\n          },\n          {\n            name: GridAreaName.DEBUG_TOGGLE,\n            start: [0, 1],\n            end: [2, 1],\n          },\n          {\n            name: GridAreaName.RULE_ARRAY,\n            start: [0, 2],\n            end: [0, 2],\n          },\n          {\n            name: GridAreaName.BOARD,\n            start: [1, 2],\n            end: [1, 2],\n          },\n          {\n            name: GridAreaName.HISTORY,\n            start: [2, 2],\n            end: [2, 2],\n          },\n          {\n            name: GridAreaName.FORM,\n            start: [0, 3],\n            end: [2, 3],\n          },\n        ]}\n      >\n        <Box gridArea={GridAreaName.HEADING} align=\"center\">\n          <Heading>{gameName}</Heading>\n        </Box>\n        <Box gridArea={GridAreaName.DEBUG_TOGGLE} justify=\"center\" direction=\"row\">\n          {DEBUG_ENABLED && (\n            <CheckBox\n              checked={debugModeEnabled}\n              label=\"Debug Mode\"\n              onChange={(event) => {\n                if (event.target.checked) {\n                  dispatch(enableDebugMode());\n                } else {\n                  dispatch(disableDebugMode());\n                }\n              }}\n            />\n          )}\n        </Box>\n        {debugModeEnabled && rawAtoms && (\n          <Box gridArea={GridAreaName.RULE_ARRAY}>\n            {order && (\n              <Box width=\"small\" overflow=\"auto\" margin={{ bottom: 'small' }}>\n                <Text size=\"small\">{JSON.stringify(order)}</Text>\n              </Box>\n            )}\n            {rawAtoms.split('\\n').map((rawAtom, i) => (\n              <Box\n                key={rawAtom}\n                background={ruleRowIndex === i && !gameCompleted ? 'yellow' : 'none'}\n              >\n                <Text size=\"small\">{rawAtom}</Text>\n              </Box>\n            ))}\n            <Box background={gameCompleted ? 'yellow' : 'end'}>\n              <Text size=\"small\">loop/end</Text>\n            </Box>\n          </Box>\n        )}\n        <Box gridArea={GridAreaName.BOARD} align=\"center\">\n          <Board\n            className={className}\n            onBoardObjectClick={(boardObject) => dispatch(touch(boardObject.id))}\n            boardObjects={boardObjects}\n            boardObjectsToBuckets={boardObjectsToBuckets}\n            boardObjectsToDebugInfo={boardObjectsToDebugInfo}\n            paused={paused}\n            disabledBucket={disabledBucket}\n            onDrop={(bucket: BucketType) => (droppedItem: BoardObjectItem): void => {\n              dispatch(move({ dragged: droppedItem.id, dropped: bucket.pos }));\n            }}\n          />\n        </Box>\n        {historyDebugInfo && (\n          <Box gridArea={GridAreaName.HISTORY} overflow=\"auto\">\n            History Log:\n            {historyDebugInfo.map((dropAttemptString) =>\n              dropAttemptString.split('\\n').map((item) => {\n                return <div key={item}>{item}</div>;\n              }),\n            )}\n          </Box>\n        )}\n        <Box gridArea={GridAreaName.FORM} align=\"center\">\n          {!gameCompleted && (\n            <Box gap=\"small\">\n              <Button label=\"Give up\" onClick={() => dispatch(goToPage('Entrance'))} />\n              <Button label=\"New Display\" onClick={() => dispatch(nextBoardObjectsArray())} />\n            </Box>\n          )}\n          {gameCompleted && (\n            <Box gap=\"medium\">\n              <Text data-cy={CY_NO_MORE_MOVES}>\n                {allChecked\n                  ? 'You’ve cleared all the shapes! Please guess the rule below”!'\n                  : 'Error: Bad Rule Array (Board could not be cleared)'}\n              </Text>\n              <Button label=\"Finish\" onClick={() => dispatch(goToPage('Entrance'))} />\n              <Button label=\"New Display\" onClick={() => dispatch(nextBoardObjectsArray())} />\n              <Button label=\"Try a new rule\" onClick={() => dispatch(goToPage('Entrance'))} />\n              <GuessRuleForm gameId={gameId as string} />\n            </Box>\n          )}\n        </Box>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default Game;\n","export enum PersistKeys {\n  GAMES = 'GAMES_0',\n  RULE_ARRAYS = 'RULE_ARRAYS_0',\n  BOARD_OBJECTS_ARRAYS = 'BOARD_OBJECTS_ARRAYS_0',\n}\n\nexport const PersistVersions: { [key in PersistKeys]: number } = {\n  [PersistKeys.GAMES]: 0,\n  [PersistKeys.RULE_ARRAYS]: 0,\n  [PersistKeys.BOARD_OBJECTS_ARRAYS]: 0,\n};\n","import React from 'react';\nimport Game from '../components/Game';\n\nconst RuleGamePage = () => <Game />;\n\nexport default RuleGamePage;\n","import React from 'react';\nimport { Grommet } from 'grommet';\nimport { hot } from 'react-hot-loader/root';\nimport { useSelector } from 'react-redux';\nimport Layers from './components/Layers';\nimport Notifications from './components/Notifications';\nimport EntrancePage from './pages/EntrancePage';\nimport RuleGamePage from './pages/RuleGamePage';\nimport { pageSelector } from './store/selectors';\n\nconst App = () => {\n  const page = useSelector(pageSelector);\n  // const book = useBookQuery();\n\n  return (\n    <Grommet full plain>\n      {page === 'Entrance' ? <EntrancePage /> : <RuleGamePage />}\n      <Layers />\n      <Notifications />\n    </Grommet>\n  );\n};\n\nexport default hot(App);\n","import { combineEpics } from 'redux-observable';\nimport { filter, map } from 'rxjs/operators';\nimport { isActionOf } from 'typesafe-actions';\nimport { goToPage } from '../actions/page';\nimport { endRuleArray, setRuleRowIndex } from '../actions/rule-row';\nimport { RootEpic } from '../../@types/epic';\n\nconst goToPageEpic: RootEpic = (action$, state$) =>\n  action$.pipe(\n    filter(isActionOf(goToPage)),\n    filter((action) => action.payload.page === 'RuleGame'),\n    map(() => (state$.value.ruleRow.numRuleRows > 0 ? setRuleRowIndex(0) : endRuleArray())),\n  );\n\nexport default combineEpics(goToPageEpic);\n","import React from 'react';\nimport { combineEpics } from 'redux-observable';\nimport { delay, filter, map, switchMap } from 'rxjs/operators';\nimport { isActionOf } from 'typesafe-actions';\nimport { Box, Heading, Image } from 'grommet';\nimport {\n  completeGame,\n  endRuleArray,\n  endRuleRow,\n  loadRuleArray,\n  move,\n  removeBoardObject,\n  resumeGame,\n  setRuleRowIndex,\n} from '../actions/rule-row';\nimport {\n  currGameNumConsecutiveSuccessfulMovesBeforePromptGuessSelector,\n  noMoreMovesSelector,\n  ruleRowIndexSelector,\n} from '../selectors';\nimport { RootEpic } from '../../@types/epic';\nimport { goToPage } from '../actions/page';\nimport {\n  currGameIdSelector,\n  noSuccessfulMovesSelector,\n  numConsecutiveSuccessfulMovesSelector,\n  numRuleRowsSelector,\n  restartIfNotClearedSelector,\n} from '../selectors/rule-row';\nimport { addLayer, removeLayer } from '../actions/layers';\nimport HappyFace from '../../assets/smiley-face.png';\nimport { RootAction } from '../actions';\nimport { CyLayer } from '../../constants/data-cy';\nimport { FEEDBACK_DURATION } from '../../constants';\nimport GuessRuleForm from '../../components/GuessRuleForm';\n\nconst moveEpic: RootEpic = (action$, state$) => {\n  return action$.pipe(\n    filter(isActionOf(move)),\n    filter(() => state$.value.ruleRow.lastMoveSuccessful),\n    delay(FEEDBACK_DURATION),\n    switchMap(() => {\n      const currGameNumConsecutiveSuccessfulMovesBeforePromptGuessSelector1 = currGameNumConsecutiveSuccessfulMovesBeforePromptGuessSelector(\n        state$.value,\n      );\n\n      const actions: RootAction[] = [\n        removeBoardObject(\n          state$.value.ruleRow.totalMoveHistory[state$.value.ruleRow.totalMoveHistory.length - 1]\n            .dragged,\n        ),\n        resumeGame(),\n      ];\n\n      if (\n        currGameNumConsecutiveSuccessfulMovesBeforePromptGuessSelector1 !== undefined &&\n        currGameNumConsecutiveSuccessfulMovesBeforePromptGuessSelector1 > 0 &&\n        numConsecutiveSuccessfulMovesSelector(state$.value) >=\n          currGameNumConsecutiveSuccessfulMovesBeforePromptGuessSelector1\n      ) {\n        actions.push(\n          addLayer(\n            <Box height=\"25vh\">\n              <Image src={HappyFace} alt=\"happy-face\" fit=\"contain\" />\n            </Box>,\n            <Box align=\"center\">\n              <Heading>Would you like to guess the rule?</Heading>\n              <Box width=\"50%\">\n                <GuessRuleForm gameId={currGameIdSelector(state$.value) as string} />\n              </Box>\n            </Box>,\n            [\n              {\n                action: (layerId) => removeLayer(layerId),\n                label: 'Continue Playing',\n              },\n            ],\n            undefined,\n            undefined,\n            undefined,\n            CyLayer.GUESS_PROMPT,\n          ),\n        );\n      }\n\n      return actions;\n    }),\n  );\n};\n\nconst noMoreMovesEpic: RootEpic = (action$, state$) =>\n  action$.pipe(\n    filter(isActionOf([setRuleRowIndex, removeBoardObject])),\n    filter(() => noMoreMovesSelector(state$.value)),\n    map(() => endRuleRow()),\n  );\n\nconst setRuleArrayEpic: RootEpic = (action$) =>\n  action$.pipe(\n    filter(isActionOf(loadRuleArray)),\n    map(() => goToPage('RuleGame')),\n  );\n\nconst endRuleArrayEpic: RootEpic = (action$) =>\n  action$.pipe(\n    filter(isActionOf(endRuleArray)),\n    map(() => completeGame()),\n  );\n\nconst endRuleRowEpic: RootEpic = (action$, state$) =>\n  action$.pipe(\n    filter(isActionOf(endRuleRow)),\n    map(() => {\n      const restartIfNotCleared = restartIfNotClearedSelector(state$.value);\n      const ruleRowIndex = ruleRowIndexSelector(state$.value);\n      const numRuleRows = numRuleRowsSelector(state$.value);\n      const noSuccessfulMoves = noSuccessfulMovesSelector(state$.value);\n\n      if (\n        ruleRowIndex === numRuleRows - 1 &&\n        (!restartIfNotCleared || (restartIfNotCleared && noSuccessfulMoves))\n      ) {\n        return endRuleArray();\n      }\n      return setRuleRowIndex((ruleRowIndex + 1) % numRuleRows);\n    }),\n  );\n\nexport default combineEpics(\n  moveEpic,\n  endRuleRowEpic,\n  endRuleArrayEpic,\n  setRuleArrayEpic,\n  noMoreMovesEpic,\n);\n","import { isActionOf } from 'typesafe-actions';\nimport { filter, map } from 'rxjs/operators';\nimport shortid from 'shortid';\nimport { combineEpics } from 'redux-observable';\nimport { addRuleArray } from '../actions/rule-arrays';\nimport { RootEpic } from '../../@types/epic';\nimport { parseRuleArray } from '../../utils/atom-parser';\nimport { addLayer, removeLayer } from '../actions/layers';\nimport { addNotification } from '../actions/notifications';\n\nconst addRuleArrayRequestEpic: RootEpic = (action$) =>\n  action$.pipe(\n    filter(isActionOf(addRuleArray.request)),\n    map((action) => {\n      try {\n        return addRuleArray.success(\n          action.payload.id,\n          action.payload.name,\n          parseRuleArray(action.payload.rawRuleArray),\n          action.payload.rawRuleArray,\n          action.payload.rawOrder ? (JSON.parse(action.payload.rawOrder) as number[]) : undefined,\n        );\n      } catch (error) {\n        return addRuleArray.failure(error);\n      }\n    }),\n  );\n\nconst addRuleArraySuccessEpic: RootEpic = (action$) =>\n  action$.pipe(\n    filter(isActionOf(addRuleArray.success)),\n    map((action) => addNotification(`Added new rule array: ${action.payload.name}`)),\n  );\n\nconst addRuleArrayFailureEpic: RootEpic = (action$) =>\n  action$.pipe(\n    filter(isActionOf(addRuleArray.failure)),\n    map((action) => {\n      const layerId = shortid();\n\n      return addLayer(\n        'Error Parsing Rule Array:',\n        action.payload.error.message,\n        [{ key: 'close', label: 'Close', action: removeLayer(layerId) }],\n        layerId,\n      );\n    }),\n  );\n\nexport default combineEpics(\n  addRuleArrayRequestEpic,\n  addRuleArrayFailureEpic,\n  addRuleArraySuccessEpic,\n);\n","import { isActionOf } from 'typesafe-actions';\nimport { filter, map } from 'rxjs/operators';\nimport shortid from 'shortid';\nimport { combineEpics } from 'redux-observable';\nimport { Optional } from 'utility-types';\nimport { RootEpic } from '../../@types/epic';\nimport { addLayer, removeLayer } from '../actions/layers';\nimport { addBoardObjectsArray } from '../actions/board-objects-arrays';\nimport { addNotification } from '../actions/notifications';\nimport { BoardObjectType } from '../../@types';\nimport { xYToPosition } from '../../utils/atom-match';\n\nconst addBoardObjectsArrayRequestEpic: RootEpic = (action$) =>\n  action$.pipe(\n    filter(isActionOf(addBoardObjectsArray.request)),\n    map((action) => {\n      try {\n        return addBoardObjectsArray.success(\n          shortid(),\n          action.payload.name,\n          (JSON.parse(action.payload.boardObjectsArrayString) as Optional<\n            BoardObjectType,\n            'id'\n          >[]).map<BoardObjectType>((boardObject) =>\n            boardObject.id\n              ? (boardObject as BoardObjectType)\n              : {\n                  ...boardObject,\n                  id: String(xYToPosition(boardObject.x, boardObject.y)),\n                },\n          ),\n          action.payload.boardObjectsArrayString,\n        );\n      } catch (error) {\n        return addBoardObjectsArray.failure(error, action.payload.boardObjectsArrayString);\n      }\n    }),\n  );\n\nconst addBoardObjectArraysSuccessEpic: RootEpic = (action$) =>\n  action$.pipe(\n    filter(isActionOf(addBoardObjectsArray.success)),\n    map((action) => addNotification(`Added new board objects array: ${action.payload.name}`)),\n  );\n\nconst addBoardObjectArraysFailureEpic: RootEpic = (action$) =>\n  action$.pipe(\n    filter(isActionOf(addBoardObjectsArray.failure)),\n    map((action) => {\n      const layerId = shortid();\n\n      return addLayer(\n        'Error Parsing Board Objects:',\n        `${action.payload.boardObjectsArrayString}\\n${action.payload.error.message}`,\n        [{ key: 'close', label: 'Close', action: removeLayer(layerId) }],\n        layerId,\n      );\n    }),\n  );\n\nexport default combineEpics(\n  addBoardObjectsArrayRequestEpic,\n  addBoardObjectArraysFailureEpic,\n  addBoardObjectArraysSuccessEpic,\n);\n","import shortid from 'shortid';\nimport range from 'lodash/range';\nimport sample from 'lodash/sample';\nimport sampleSize from 'lodash/sampleSize';\nimport { BoardObjectType, Color, Shape } from '../../../@types';\nimport { colors, cols, rows, shapes } from '../../../constants';\nimport { positionToXy } from '../../../utils/atom-match';\n\nexport const getValidPositions = (cols: number, rows: number) =>\n  range(1, (cols - 2) * (rows - 2) + 1);\n\nconst randomObjectsCreator = (numObjects: number): BoardObjectType[] =>\n  sampleSize(getValidPositions(cols, rows), numObjects).map((pos) => ({\n    id: shortid(),\n    color: sample(colors) as Color,\n    shape: sample(shapes) as Shape,\n    x: positionToXy(pos).x,\n    y: positionToXy(pos).y,\n  }));\n\nexport default randomObjectsCreator;\n","import { combineEpics } from 'redux-observable';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { isActionOf } from 'typesafe-actions';\nimport { RootEpic } from '../../@types/epic';\nimport { addGame, enterGame, loadGames } from '../actions/games';\nimport { BoardObjectType, ExportedFile, RuleArray } from '../../@types';\nimport { parseRuleArray } from '../../utils/atom-parser';\nimport { goToPage } from '../actions/page';\nimport {\n  boardObjectsArraysByIdSelector,\n  gamesByIdSelector,\n  ruleArraysByIdSelector,\n} from '../selectors';\nimport { addLayer, removeLayer } from '../actions/layers';\nimport { loadRuleArray } from '../actions/rule-row';\nimport randomObjectsCreator from './__helpers__/objects-creator';\nimport { addNotification } from '../actions/notifications';\nimport { setBoardObjectsArray, setGameId } from '../actions/game';\n\n// TODO: Dispatch addRuleArray and addBoardObjectsArrays requests to use their Epics instead\nconst loadGamesEpic: RootEpic = (action$) =>\n  action$.pipe(\n    filter(isActionOf(loadGames.request)),\n    switchMap(async ({ payload: { id, file } }) => {\n      const text = await new Response(new Blob([file])).text();\n      return [id, text] as const;\n    }),\n    map(([id, text]) => {\n      try {\n        const {\n          boardObjectsArrays: boardObjectsArraysWithoutStringified,\n          games,\n          ruleArrays: ruleArraysWithoutValues,\n        }: ExportedFile = JSON.parse(text);\n        const ruleArrays = Object.entries(ruleArraysWithoutValues).reduce<{\n          [id: string]: { id: string; name: string; stringified: string; value: RuleArray };\n        }>(\n          (acc, [id, curr]) => ({\n            ...acc,\n            [id]: {\n              ...curr,\n              value: parseRuleArray(curr.stringified),\n            },\n          }),\n          {},\n        );\n        const boardObjectsArrays = Object.entries(boardObjectsArraysWithoutStringified).reduce<{\n          [id: string]: { id: string; name: string; stringified: string; value: BoardObjectType[] };\n        }>(\n          (acc, [id, curr]) => ({\n            ...acc,\n            [id]: {\n              ...curr,\n              stringified: JSON.stringify(curr),\n            },\n          }),\n          {},\n        );\n        return loadGames.success(games, ruleArrays, boardObjectsArrays, id);\n      } catch (error) {\n        return loadGames.failure(error, id);\n      }\n    }),\n    // switchMap((res) => {\n    //   return new Promise<any>((resolve) => setTimeout(() => resolve(res), 3000));\n    // }),\n  );\n\nconst enterGameEpic: RootEpic = (action$, state$) =>\n  action$.pipe(\n    filter(isActionOf(enterGame)),\n    switchMap(({ payload: { id } }) => {\n      const game = gamesByIdSelector(state$.value)[id];\n      if (game.ruleArray === undefined) {\n        return [\n          addLayer(\n            `Game ${game.name} is missing its rule array.`,\n            '',\n            [\n              {\n                key: 'close',\n                label: 'Close',\n                action: removeLayer('missing-rule-array'),\n              },\n            ],\n            'missing-rule-array',\n          ),\n        ];\n      }\n      const ruleArray = ruleArraysByIdSelector(state$.value)[game.ruleArray];\n\n      if (game.useRandomBoardObjects) {\n        return [\n          setGameId(id),\n          loadRuleArray(\n            randomObjectsCreator(game.numRandomBoardObjects),\n            ruleArray.value,\n            id,\n            ruleArray.stringified,\n            ruleArray.order,\n            game.restartIfNotCleared,\n          ),\n          goToPage('RuleGame'),\n        ];\n      }\n      if (game.boardObjectsArrays.length === 0) {\n        return [\n          addLayer(\n            `Game ${game.name} is missing board objects arrays.`,\n            '',\n            [\n              {\n                key: 'close',\n                label: 'Close',\n                action: removeLayer('missing-rule-array'),\n              },\n            ],\n            'missing-rule-array',\n          ),\n        ];\n      }\n\n      const boardObjectsArray = boardObjectsArraysByIdSelector(state$.value)[\n        game.boardObjectsArrays[0]\n      ];\n      return [\n        setGameId(id),\n        setBoardObjectsArray(0),\n        loadRuleArray(\n          boardObjectsArray.value,\n          ruleArray.value,\n          id,\n          ruleArray.stringified,\n          ruleArray.order,\n          game.restartIfNotCleared,\n        ),\n        goToPage('RuleGame'),\n      ];\n    }),\n  );\n\nconst addGameEpic: RootEpic = (action$) =>\n  action$.pipe(\n    filter(isActionOf(addGame)),\n    map((action) => addNotification(`Added game: ${action.payload.name}`)),\n  );\n\nexport default combineEpics(loadGamesEpic, enterGameEpic, addGameEpic);\n","import { isActionOf } from 'typesafe-actions';\nimport { filter, switchMap } from 'rxjs/operators';\nimport { combineEpics } from 'redux-observable';\nimport { RootEpic } from '../../@types/epic';\nimport { nextBoardObjectsArray, setBoardObjectsArray } from '../actions/game';\nimport {\n  boardObjectsArraysByIdSelector,\n  currBoardObjectsArrayIndexSelector,\n  currGameIdSelector,\n  gamesByIdSelector,\n  ruleArraysByIdSelector,\n} from '../selectors';\nimport { loadRuleArray } from '../actions/rule-row';\nimport randomObjectsCreator from './__helpers__/objects-creator';\nimport { goToPage } from '../actions/page';\n\nconst nextBoardArrayObjectsEpic: RootEpic = (action$, state$) =>\n  action$.pipe(\n    filter(isActionOf(nextBoardObjectsArray)),\n    switchMap(() => {\n      const game = gamesByIdSelector(state$.value)[currGameIdSelector(state$.value) as string];\n      const ruleArray = ruleArraysByIdSelector(state$.value)[game.ruleArray as string];\n\n      if (game.useRandomBoardObjects) {\n        return [\n          loadRuleArray(\n            randomObjectsCreator(game.numRandomBoardObjects),\n            ruleArray.value,\n            game.id,\n            ruleArray.stringified,\n            ruleArray.order,\n            game.restartIfNotCleared,\n          ),\n          goToPage('RuleGame'),\n        ];\n      }\n\n      const currIndex = currBoardObjectsArrayIndexSelector(state$.value) as number;\n      return [\n        setBoardObjectsArray((currIndex + 1) % game.boardObjectsArrays.length),\n        loadRuleArray(\n          boardObjectsArraysByIdSelector(state$.value)[game.boardObjectsArrays[currIndex]].value,\n          ruleArray.value,\n          game.id,\n          ruleArray.stringified,\n          ruleArray.order,\n          game.restartIfNotCleared,\n        ),\n        goToPage('RuleGame'),\n      ];\n    }),\n  );\nexport default combineEpics(nextBoardArrayObjectsEpic);\n","import { combineEpics } from 'redux-observable';\nimport { REHYDRATE } from 'redux-persist/es/constants';\nimport { filter, map } from 'rxjs/operators';\nimport page from './page';\nimport ruleRow from './rule-row';\nimport ruleArrays from './rule-arrays';\nimport boardObjectsArrays from './board-object-arrays';\nimport games from './games';\nimport game from './game';\nimport { RootEpic } from '../../@types/epic';\nimport { loadGames } from '../actions/games';\nimport simpleRand5 from '../../assets/simple-rand-5.json';\n\nconst goToPageEpic: RootEpic = (action$) =>\n  action$.pipe(\n    // Third party actions such as persist are not included in RootAction\n    // so just cast the types to a string\n    filter((action) => (action.type as string) === REHYDRATE),\n    map(() => loadGames.request(new File([JSON.stringify(simpleRand5)], 'temp'))),\n  );\n\nexport const rootEpic = combineEpics(\n  page,\n  ruleRow,\n  ruleArrays,\n  boardObjectsArrays,\n  games,\n  game,\n  goToPageEpic,\n);\n","import { getType } from 'typesafe-actions';\nimport { Page } from '../../@types';\nimport { RootAction } from '../actions';\nimport { goToPage } from '../actions/page';\n\ntype State = {\n  page: Page;\n};\n\nconst initialState: State = {\n  page: 'Entrance',\n};\n\nconst reducer = (state = initialState, action: RootAction): State => {\n  // noinspection JSRedundantSwitchStatement\n  switch (action.type) {\n    case getType(goToPage):\n      return {\n        ...state,\n        page: action.payload.page,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import keyBy from 'lodash/keyBy';\nimport { getType } from 'typesafe-actions';\nimport {\n  BoardObjectId,\n  BoardObjectType,\n  BucketPosition,\n  DropAttempt,\n  RuleArray,\n  RuleRow,\n  Shape,\n} from '../../@types';\nimport { RootAction } from '../actions';\nimport {\n  completeGame,\n  disableDebugMode,\n  enableDebugMode,\n  loadRuleArray,\n  move,\n  removeBoardObject,\n  resumeGame,\n  setRuleRowIndex,\n  touch,\n} from '../actions/rule-row';\nimport atomMatch, { xYToPosition } from '../../utils/atom-match';\nimport { DEBUG_ENABLED } from '../../constants/env';\n\nexport type State = {\n  atomCounts: { [atomId: string]: number };\n  boardObjectsToBucketsToAtoms: {\n    [boardObjectId: string]: { [bucket: number]: Set<string> };\n  };\n  initialBoardObjectsById: {\n    [boardObjectId: string]: BoardObjectType;\n  };\n  boardObjectsById: {\n    [boardObjectId: string]: BoardObjectType;\n  };\n  totalMoveHistory: DropAttempt[];\n  touchAttempts: BoardObjectId[];\n  dropAttempts: DropAttempt[];\n  ruleRowIndex: number;\n  numRuleRows: number;\n  lastMoveSuccessful: boolean;\n  paused: boolean;\n  debugMode: boolean;\n  rawRuleArrayString?: string;\n  gameCompleted: boolean;\n  parsingRuleArray: boolean;\n  error?: Error;\n  order?: number[];\n  numConsecutiveSuccessfulMoves: number;\n  currGameId?: string;\n  restartIfNotCleared: boolean;\n  ruleRowsCompleted: number;\n  ruleArray?: RuleArray;\n  // One element per rule row.\n  ruleArrayInfos: { successfulMoves: number }[];\n};\n\nexport const initialState: State = {\n  atomCounts: {},\n  boardObjectsToBucketsToAtoms: {},\n  initialBoardObjectsById: {},\n  boardObjectsById: {},\n  totalMoveHistory: [],\n  touchAttempts: [],\n  dropAttempts: [],\n  ruleRowIndex: NaN,\n  numRuleRows: 0,\n  lastMoveSuccessful: false,\n  paused: false,\n  debugMode: DEBUG_ENABLED && false,\n  rawRuleArrayString: undefined,\n  gameCompleted: false,\n  parsingRuleArray: false,\n  error: undefined,\n  order: [],\n  numConsecutiveSuccessfulMoves: 0,\n  currGameId: undefined,\n  restartIfNotCleared: false,\n  ruleRowsCompleted: 0,\n  ruleArray: undefined,\n  ruleArrayInfos: [],\n};\n\nconst getBoardObjectsToBucketsToAtoms = (\n  totalMoveHistory: DropAttempt[],\n  initialBoardObjectsById: {\n    [boardObjectId: string]: BoardObjectType;\n  },\n  boardObjectsById: {\n    [boardObjectId: string]: BoardObjectType;\n  },\n  atomCounts: { [atomId: string]: number },\n  ruleRow: RuleRow,\n) =>\n  Object.values(boardObjectsById)\n    .filter((boardObject) => boardObject.shape !== Shape.CHECK)\n    .reduce<{ [boardObjectId: string]: { [bucket: number]: Set<string> } }>(\n      (acc, boardObject) => ({\n        ...acc,\n        [boardObject.id]: {\n          ...ruleRow\n            .filter(atomMatch(boardObject, atomCounts))\n            .reduce<{ [bucket: number]: Set<string> }>(\n              (acc, atom) => {\n                atom.fns\n                  .map((fn) => fn(boardObject.id, totalMoveHistory, initialBoardObjectsById))\n                  .forEach((bucket) => {\n                    if (Number.isFinite(bucket)) {\n                      acc[bucket].add(atom.id);\n                    }\n                  });\n                return acc;\n              },\n              {\n                [BucketPosition.TR]: new Set<string>(),\n                [BucketPosition.TL]: new Set<string>(),\n                [BucketPosition.BR]: new Set<string>(),\n                [BucketPosition.BL]: new Set<string>(),\n              },\n            ),\n        },\n      }),\n      {},\n    );\n\nconst reducer = (state: State = initialState, action: RootAction): State => {\n  switch (action.type) {\n    case getType(loadRuleArray): {\n      const boardObjectsById = keyBy(action.payload.boardObjects, (boardObject) => boardObject.id);\n\n      return {\n        ...state,\n        boardObjectsToBucketsToAtoms: {},\n        initialBoardObjectsById: boardObjectsById,\n        boardObjectsById,\n        ruleRowIndex: NaN,\n        numRuleRows: action.payload.ruleArray.length,\n        totalMoveHistory: [],\n        dropAttempts: [],\n        touchAttempts: [],\n        lastMoveSuccessful: false,\n        paused: false,\n        gameCompleted: false,\n        parsingRuleArray: false,\n        rawRuleArrayString: action.payload.rawRuleArrayString,\n        order: action.payload.order,\n        numConsecutiveSuccessfulMoves: 0,\n        currGameId: action.payload.gameId,\n        restartIfNotCleared: action.payload.restartIfNotCleared,\n        ruleRowsCompleted: 0,\n        ruleArray: action.payload.ruleArray,\n        ruleArrayInfos: action.payload.ruleArray.map(() => ({\n          successfulMoves: 0,\n        })),\n      };\n    }\n\n    case getType(setRuleRowIndex): {\n      const atomCounts = state.ruleArray![action.payload.index].reduce(\n        (acc, atom) => ({\n          ...acc,\n          [atom.id]: atom.counter,\n        }),\n        {},\n      );\n\n      // Why we need to compute all possible moves:\n      // 1. If no possible moves, advance to next rule row or end game.\n      // (An epic must detect this and continue to the next rule row then)\n      // 2. Hover thingy if possible to drop.\n      const preOrderBoardObjectsToBucketsToAtoms = getBoardObjectsToBucketsToAtoms(\n        state.totalMoveHistory,\n        state.initialBoardObjectsById,\n        state.boardObjectsById,\n        atomCounts,\n        state.ruleArray![action.payload.index],\n      );\n\n      let boardObjectsToBucketsToAtoms = preOrderBoardObjectsToBucketsToAtoms;\n      if (state.order) {\n        const boardObjectsIdsByPosition: {\n          [position: number]: string[];\n        } = Object.entries(preOrderBoardObjectsToBucketsToAtoms).reduce<{\n          [position: number]: string[];\n        }>((acc, [boardObjectId, bucketsToAtoms]) => {\n          if (Object.values(bucketsToAtoms).some((atoms) => atoms.size > 0)) {\n            const pos = xYToPosition(\n              state.initialBoardObjectsById[boardObjectId].x,\n              state.initialBoardObjectsById[boardObjectId].y,\n            );\n\n            if (!(pos in acc)) {\n              acc[pos] = [];\n            }\n\n            acc[pos].push(boardObjectId);\n          }\n          return acc;\n        }, {});\n\n        const highestPos = state.order.find((pos) => pos in boardObjectsIdsByPosition);\n        if (highestPos) {\n          const validBoardObjects = boardObjectsIdsByPosition[highestPos];\n          boardObjectsToBucketsToAtoms = validBoardObjects.reduce(\n            (acc, validBoardObject) => ({\n              ...acc,\n              [validBoardObject]: preOrderBoardObjectsToBucketsToAtoms[validBoardObject],\n            }),\n            {},\n          );\n        }\n      }\n\n      return {\n        ...state,\n        atomCounts,\n        ruleRowIndex: action.payload.index,\n        boardObjectsToBucketsToAtoms,\n        ruleRowsCompleted: state.ruleRowsCompleted + 1,\n        ruleArrayInfos: state.ruleArrayInfos.map((ruleArrayInfo, i) =>\n          i !== action.payload.index ? ruleArrayInfo : { ...ruleArrayInfo, successfulMoves: 0 },\n        ),\n      };\n    }\n\n    case getType(touch):\n      return {\n        ...state,\n        touchAttempts: [...state.touchAttempts, action.payload.boardObjectId],\n      };\n\n    case getType(move): {\n      const { dragged, dropped } = action.payload.dropAttempt;\n\n      const matchedAtoms = Array.from(\n        state.boardObjectsToBucketsToAtoms?.[dragged]?.[dropped] ?? [],\n      );\n\n      if (matchedAtoms.length === 0) {\n        // Made an incorrect move\n        return {\n          ...state,\n          dropAttempts: [...state.dropAttempts, action.payload.dropAttempt],\n          lastMoveSuccessful: false,\n          numConsecutiveSuccessfulMoves: 0,\n        };\n      }\n\n      const newTotalMoveHistory = [...state.totalMoveHistory, action.payload.dropAttempt];\n      const newAtomCounts = matchedAtoms.reduce(\n        (acc, atomId) => ({\n          ...acc,\n          [atomId]: state.atomCounts[atomId] - 1,\n        }),\n        state.atomCounts,\n      );\n      return {\n        ...state,\n        atomCounts: newAtomCounts,\n        boardObjectsById: {\n          ...state.boardObjectsById,\n          [dragged]: {\n            ...state.boardObjectsById[dragged],\n            shape: Shape.CHECK,\n          },\n        },\n        dropAttempts: [...state.dropAttempts, action.payload.dropAttempt],\n        totalMoveHistory: newTotalMoveHistory,\n        lastMoveSuccessful: true,\n        paused: true,\n        // boardObjectsToBucketsToAtoms,\n        numConsecutiveSuccessfulMoves: state.numConsecutiveSuccessfulMoves + 1,\n        ruleArrayInfos: state.ruleArrayInfos.map((ruleArrayInfo, i) =>\n          i !== state.ruleRowIndex\n            ? ruleArrayInfo\n            : {\n                ...ruleArrayInfo,\n                successfulMoves: state.ruleArrayInfos[state.ruleRowIndex].successfulMoves + 1,\n              },\n        ),\n      };\n    }\n\n    case getType(removeBoardObject): {\n      // 1. If no possible moves, advance to next rule row or end game.\n      // (An epic must detect this and continue to the next rule row then)\n      // 2. Hover thingy if possible to drop.\n      const preOrderBoardObjectsToBucketsToAtoms = getBoardObjectsToBucketsToAtoms(\n        state.totalMoveHistory,\n        state.initialBoardObjectsById,\n        state.boardObjectsById,\n        state.atomCounts,\n        state.ruleArray![state.ruleRowIndex],\n      );\n\n      let boardObjectsToBucketsToAtoms = preOrderBoardObjectsToBucketsToAtoms;\n      if (state.order) {\n        const boardObjectsIdsByPosition: {\n          [position: number]: string[];\n        } = Object.entries(preOrderBoardObjectsToBucketsToAtoms).reduce<{\n          [position: number]: string[];\n        }>((acc, [boardObjectId, bucketsToAtoms]) => {\n          if (Object.values(bucketsToAtoms).some((atoms) => atoms.size > 0)) {\n            const pos = xYToPosition(\n              state.initialBoardObjectsById[boardObjectId].x,\n              state.initialBoardObjectsById[boardObjectId].y,\n            );\n\n            if (!(pos in acc)) {\n              acc[pos] = [];\n            }\n\n            acc[pos].push(boardObjectId);\n          }\n          return acc;\n        }, {});\n\n        const highestPos = state.order.find((pos) => pos in boardObjectsIdsByPosition);\n        if (highestPos) {\n          const validBoardObjects = boardObjectsIdsByPosition[highestPos];\n          boardObjectsToBucketsToAtoms = validBoardObjects.reduce(\n            (acc, validBoardObject) => ({\n              ...acc,\n              [validBoardObject]: preOrderBoardObjectsToBucketsToAtoms[validBoardObject],\n            }),\n            {},\n          );\n        }\n      }\n      return {\n        ...state,\n        boardObjectsToBucketsToAtoms,\n      };\n    }\n    case getType(resumeGame):\n      return {\n        ...state,\n        paused: false,\n      };\n\n    case getType(enableDebugMode):\n      return {\n        ...state,\n        debugMode: true,\n      };\n    case getType(disableDebugMode):\n      return {\n        ...state,\n        debugMode: false,\n      };\n    case getType(completeGame):\n      return {\n        ...state,\n        gameCompleted: true,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { getType } from 'typesafe-actions';\nimport { RootAction } from '../actions';\nimport { LayerData } from '../../@types/layers';\nimport { addLayer, removeLayer } from '../actions/layers';\n\nexport type State = {\n  layersById: { [layerId: string]: LayerData };\n  layerIds: string[];\n};\n\nexport const initialState: State = {\n  layersById: {},\n  layerIds: [],\n};\n\nconst reducer = (state: State = initialState, action: RootAction): State => {\n  switch (action.type) {\n    case getType(addLayer):\n      return {\n        ...state,\n        layersById: {\n          ...state.layersById,\n          [action.payload.id]: {\n            id: action.payload.id,\n            title: action.payload.title,\n            description: action.payload.description,\n            actionButtons: action.payload.actionButtons,\n            closeOnClickOutside: action.payload.closeOnClickOutside,\n            closeOnEsc: action.payload.closeOnEsc,\n            dataCyIdentifier: action.payload.dataCyIdentifier,\n          },\n        },\n        layerIds: [...state.layerIds, action.payload.id],\n      };\n\n    case getType(removeLayer): {\n      const { [action.payload.id]: _, ...newLayersById } = state.layersById;\n\n      return {\n        ...state,\n        layersById: newLayersById,\n        layerIds: state.layerIds.filter((layerId) => layerId !== action.payload.id),\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","/**\n * Removes first element value in array.\n * @param array\n * @param value\n */\nexport default <T>(array: T[], value: T): T[] => {\n  const index = array.indexOf(value);\n  return [...array.slice(0, index), ...array.slice(index + 1)];\n};\n","import { getType } from 'typesafe-actions';\nimport { createTransform, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/es/storage';\nimport { ValuesType } from 'utility-types';\nimport { RuleArray } from '../../@types';\nimport { RootAction } from '../actions';\nimport { addRuleArray, removeRuleArray } from '../actions/rule-arrays';\nimport removeFirst from '../../utils/removeFirst';\nimport { loadGames } from '../actions/games';\nimport { PersistKeys, PersistVersions } from './__helpers__/PersistConstants';\nimport { parseRuleArray } from '../../utils/atom-parser';\n\nexport type State = {\n  byId: {\n    [id: string]: {\n      id: string;\n      name: string;\n      stringified: string;\n      value: RuleArray;\n      order?: number[];\n    };\n  };\n  allIds: string[];\n  isRequesting: boolean;\n};\n\nexport const initialState: State = {\n  byId: {},\n  allIds: [],\n  isRequesting: false,\n};\n\nconst reducer = (state: State = initialState, action: RootAction): State => {\n  switch (action.type) {\n    case getType(addRuleArray.request): {\n      return {\n        ...state,\n        isRequesting: true,\n      };\n    }\n    case getType(addRuleArray.success): {\n      return {\n        ...state,\n        byId: {\n          ...state.byId,\n          [action.payload.id]: {\n            id: action.payload.id,\n            value: action.payload.ruleArray,\n            stringified: action.payload.stringified,\n            name: action.payload.name,\n            order: action.payload.order,\n          },\n        },\n        allIds: [...state.allIds, action.payload.id],\n        isRequesting: false,\n      };\n    }\n\n    case getType(addRuleArray.failure): {\n      return {\n        ...state,\n        isRequesting: false,\n      };\n    }\n\n    case getType(removeRuleArray): {\n      const { [action.payload.id]: _, ...newById } = state.byId;\n\n      return {\n        ...state,\n        byId: newById,\n        allIds: removeFirst(state.allIds, action.payload.id),\n      };\n    }\n\n    case getType(loadGames.success): {\n      const allIdsSet = new Set(state.allIds);\n\n      return {\n        ...state,\n        byId: {\n          ...state.byId,\n          ...action.payload.ruleArrays,\n        },\n        allIds: [\n          ...state.allIds,\n          ...Object.values(action.payload.ruleArrays)\n            .filter((ruleArray) => !allIdsSet.has(ruleArray.id))\n            .map((ruleArray) => ruleArray.id),\n        ],\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default persistReducer(\n  {\n    version: PersistVersions[PersistKeys.RULE_ARRAYS],\n    key: PersistKeys.RULE_ARRAYS,\n    storage,\n    transforms: [\n      // Required to reparse because functions are not serializable in\n      // local storage\n      createTransform<ValuesType<State>, ValuesType<State>, State, State>(\n        null,\n        (outboundState, key) =>\n          key === 'byId'\n            ? Object.entries(outboundState).reduce(\n                (acc, [id, curr]) => ({\n                  ...acc,\n                  [id]: { ...curr, value: parseRuleArray(curr.stringified) },\n                }),\n                {},\n              )\n            : outboundState,\n      ),\n    ],\n  },\n  reducer,\n);\n","import { getType } from 'typesafe-actions';\nimport storage from 'redux-persist/es/storage';\nimport { persistReducer } from 'redux-persist';\nimport { BoardObjectType } from '../../@types';\nimport { RootAction } from '../actions';\nimport removeFirst from '../../utils/removeFirst';\nimport { addBoardObjectsArray, removeBoardObjectsArray } from '../actions/board-objects-arrays';\nimport { loadGames } from '../actions/games';\nimport { PersistKeys, PersistVersions } from './__helpers__/PersistConstants';\n\nexport type State = {\n  byId: {\n    [id: string]: { id: string; name: string; stringified: string; value: BoardObjectType[] };\n  };\n  allIds: string[];\n  isRequesting: boolean;\n};\n\nexport const initialState: State = {\n  byId: {},\n  allIds: [],\n  isRequesting: false,\n};\n\nconst reducer = (state: State = initialState, action: RootAction): State => {\n  switch (action.type) {\n    case getType(addBoardObjectsArray.request): {\n      return {\n        ...state,\n        isRequesting: true,\n      };\n    }\n    case getType(addBoardObjectsArray.success): {\n      return {\n        ...state,\n        byId: {\n          ...state.byId,\n          [action.payload.id]: {\n            id: action.payload.id,\n            value: action.payload.boardObjectsArray,\n            stringified: action.payload.stringified,\n            name: action.payload.name,\n          },\n        },\n        allIds: [...state.allIds, action.payload.id],\n        isRequesting: false,\n      };\n    }\n\n    case getType(addBoardObjectsArray.failure): {\n      return {\n        ...state,\n        isRequesting: false,\n      };\n    }\n\n    case getType(removeBoardObjectsArray): {\n      const { [action.payload.id]: _, ...newById } = state.byId;\n\n      return {\n        ...state,\n        byId: newById,\n        allIds: removeFirst(state.allIds, action.payload.id),\n      };\n    }\n\n    case getType(loadGames.success): {\n      const allIdsSet = new Set(state.allIds);\n\n      return {\n        ...state,\n        byId: {\n          ...state.byId,\n          ...action.payload.boardObjectsArrays,\n        },\n        allIds: [\n          ...state.allIds,\n          ...Object.values(action.payload.boardObjectsArrays)\n            .filter((boardObjectsArray) => !allIdsSet.has(boardObjectsArray.id))\n            .map((boardObjectsArray) => boardObjectsArray.id),\n        ],\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default persistReducer(\n  {\n    version: PersistVersions[PersistKeys.BOARD_OBJECTS_ARRAYS],\n    key: PersistKeys.BOARD_OBJECTS_ARRAYS,\n    storage,\n  },\n  reducer,\n);\n","import { getType } from 'typesafe-actions';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/es/storage';\nimport { RootAction } from '../actions';\nimport removeFirst from '../../utils/removeFirst';\nimport {\n  addGame,\n  loadGames,\n  removeGame,\n  setGameBoardObjectsArrays,\n  setGameRuleArray,\n} from '../actions/games';\nimport { PersistKeys, PersistVersions } from './__helpers__/PersistConstants';\nimport { Game } from '../../@types';\nimport { addBoardObjectsArray } from '../actions/board-objects-arrays';\n\nexport type State = {\n  byId: {\n    [id: string]: Game;\n  };\n  allIds: string[];\n};\n\nexport const initialState: State = {\n  byId: {},\n  allIds: [],\n};\n\nconst reducer = (state: State = initialState, action: RootAction): State => {\n  switch (action.type) {\n    case getType(addGame): {\n      return {\n        ...state,\n        byId: {\n          ...state.byId,\n          [action.payload.id]: {\n            id: action.payload.id,\n            boardObjectsArrays: [...action.payload.boardObjectsArrays],\n            name: action.payload.name,\n            ruleArray: action.payload.ruleArray,\n            useRandomBoardObjects: action.payload.useRandomBoardObjects,\n            numRandomBoardObjects: action.payload.numRandomBoardObjects,\n            numConsecutiveSuccessfulMovesBeforePromptGuess:\n              action.payload.numConsecutiveSuccessfulMovesBeforePromptGuess,\n            restartIfNotCleared: action.payload.restartIfNotCleared,\n          },\n        },\n        allIds: [...state.allIds, action.payload.id],\n      };\n    }\n\n    case getType(removeGame): {\n      const { [action.payload.id]: _, ...newById } = state.byId;\n\n      return {\n        ...state,\n        byId: newById,\n        allIds: removeFirst(state.allIds, action.payload.id),\n      };\n    }\n\n    case getType(setGameRuleArray): {\n      return {\n        ...state,\n        byId: {\n          ...state.byId,\n          [action.payload.id]: {\n            ...state.byId[action.payload.id],\n            ruleArray: action.payload.ruleArray,\n          },\n        },\n      };\n    }\n\n    case getType(setGameBoardObjectsArrays): {\n      return {\n        ...state,\n        byId: {\n          ...state.byId,\n          [action.payload.id]: {\n            ...state.byId[action.payload.id],\n            boardObjectsArrays: [...action.payload.boardObjectsArrays],\n          },\n        },\n      };\n    }\n\n    case getType(loadGames.success): {\n      const allIdsSet = new Set(state.allIds);\n\n      return {\n        ...state,\n        byId: {\n          ...state.byId,\n          ...action.payload.games,\n        },\n        allIds: [\n          ...state.allIds,\n          ...Object.values(action.payload.games)\n            .filter((game) => !allIdsSet.has(game.id))\n            .map((game) => game.id),\n        ],\n      };\n    }\n\n    case getType(addBoardObjectsArray.success): {\n      return {\n        ...state,\n        byId: Object.entries(state.byId).reduce(\n          (acc, [id, curr]) => ({\n            ...acc,\n            [id]: {\n              ...curr,\n              boardObjectsArrays: [...curr.boardObjectsArrays, action.payload.id],\n            },\n          }),\n          {},\n        ),\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default persistReducer(\n  {\n    version: PersistVersions[PersistKeys.GAMES],\n    key: PersistKeys.GAMES,\n    storage,\n  },\n  reducer,\n);\n","import { getType } from 'typesafe-actions';\nimport { RootAction } from '../actions';\nimport { addNotification, removeNotification } from '../actions/notifications';\nimport { NotificationData } from '../../@types/notifications';\n\nexport type State = {\n  byId: { [layerId: string]: NotificationData };\n  ids: string[];\n};\n\nexport const initialState: State = {\n  byId: {},\n  ids: [],\n};\n\nconst reducer = (state: State = initialState, action: RootAction): State => {\n  switch (action.type) {\n    case getType(addNotification):\n      return {\n        ...state,\n        byId: {\n          ...state.byId,\n          [action.payload.id]: {\n            id: action.payload.id,\n            title: action.payload.title,\n          },\n        },\n        ids: [...state.ids, action.payload.id],\n      };\n\n    case getType(removeNotification): {\n      const { [action.payload.id]: _, ...newLayersById } = state.byId;\n\n      return {\n        ...state,\n        byId: newLayersById,\n        ids: state.ids.filter((layerId) => layerId !== action.payload.id),\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { getType } from 'typesafe-actions';\nimport { RootAction } from '../actions';\nimport { setBoardObjectsArray, setGameId } from '../actions/game';\n\nexport type State = {\n  currBoardObjectsArrayIndex?: number;\n  currGameId?: string;\n};\n\nexport const initialState: State = {\n  currBoardObjectsArrayIndex: undefined,\n  currGameId: undefined,\n};\n\nconst reducer = (state: State = initialState, action: RootAction): State => {\n  switch (action.type) {\n    case getType(setGameId): {\n      return {\n        ...state,\n        currGameId: action.payload.gameId,\n        currBoardObjectsArrayIndex: 0,\n      };\n    }\n\n    case getType(setBoardObjectsArray): {\n      return {\n        ...state,\n        currBoardObjectsArrayIndex: action.payload.index,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers, Reducer } from 'redux';\nimport { History } from 'history';\nimport page from './page';\nimport ruleRow from './rule-row';\nimport layers from './layers';\nimport ruleArrays from './rule-arrays';\nimport boardObjectArrays from './board-objects-arrays';\nimport games from './games';\nimport notifications from './notifications';\nimport game from './game';\n\nexport const createRootReducer = () =>\n  combineReducers({\n    page,\n    ruleRow,\n    layers,\n    ruleArrays,\n    boardObjectArrays,\n    games,\n    notifications,\n    game,\n  });\n\nexport default createRootReducer;\n\nexport type RootState = typeof createRootReducer extends (history: History) => Reducer<infer S>\n  ? S\n  : never;\n","import { AnyAction, applyMiddleware, compose, createStore, Middleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport { createEpicMiddleware } from 'redux-observable';\n/* eslint-disable */\n// @ts-ignore\nimport { createDynamicMiddlewares } from 'redux-dynamic-middlewares';\n/* eslint-enable */\nimport { persistStore } from 'redux-persist';\nimport { RootAction } from './actions';\nimport { rootEpic } from './epics';\nimport createRootReducer, { RootState } from './reducers';\n\nconst DEV = process.env.NODE_ENV !== 'production';\n\nconst epicMiddleware = createEpicMiddleware<RootAction, RootAction, RootState>();\n\nconst middleware: Middleware[] = [epicMiddleware];\n\nconst dynamicMiddlewaresInstance = createDynamicMiddlewares();\n\nif (!DEV) {\n  if (window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {\n    window.__REACT_DEVTOOLS_GLOBAL_HOOK__.inject = () => {};\n  }\n} else {\n  middleware.push(\n    createLogger({\n      predicate: (getState, action: { type: string; payload: {}; meta: {} }) =>\n        !/^@@/.test(action.type),\n      collapsed: true,\n    }),\n    dynamicMiddlewaresInstance.enhancer,\n  );\n}\n\nconst composeEnhancers =\n  DEV && typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n        // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n      })\n    : compose;\n\nconst store = createStore<RootState, AnyAction, {}, undefined>(\n  createRootReducer(),\n  composeEnhancers(applyMiddleware(...middleware)),\n);\n\nconst persistor = persistStore(store);\n\nif (window.Cypress && DEV) {\n  window.store = store;\n  window.dynamicMiddlewaresInstance = dynamicMiddlewaresInstance;\n}\n\nexport default () => {\n  epicMiddleware.run(rootEpic);\n  return { store, persistor };\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { DndProvider } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport App from './App';\nimport './index.css';\nimport configureStore from './store/configureStore';\n\n// const client = new ApolloClient({\n//   cache: new InMemoryCache(),\n//   link: new HttpLink({\n//     uri: 'http://localhost:4000/',\n//   }),\n// });\n\nexport const { store } = configureStore();\n\n// eslint-disable-next-line react/jsx-filename-extension\nReactDOM.render(\n  // <ApolloProvider client={client}>\n  <Provider store={store}>\n    <DndProvider backend={HTML5Backend}>\n      <App />\n    </DndProvider>\n  </Provider>,\n  // </ApolloProvider>,\n  document.getElementById('root'),\n);\n","import shortid from 'shortid';\nimport { Atom, AtomFn, BucketPosition, Color, DropAttempt, Shape, VALID_SHAPES } from '../@types';\n\ntype RawAtomFn = (\n  p: BucketPosition | undefined,\n  pcs: BucketPosition | undefined,\n  pc: BucketPosition | undefined,\n  ps: BucketPosition | undefined,\n) => number;\n\n// TODO: Add reselect to cache args and return value\nconst convertRawAtomFnToAtomFn = (rawAtomFn: RawAtomFn): AtomFn => (\n  boardObjectId,\n  totalMoveHistory,\n  boardObjects,\n) => {\n  const reversedTotalMoveHistory = [...totalMoveHistory].reverse();\n\n  /**\n   * Returns most recent dropped bucket id according to predicate\n   * else undefined if no match\n   * @param predicate\n   */\n  const findMostRecentId = (\n    predicate: (dropAttempt: DropAttempt) => boolean,\n  ): BucketPosition | undefined => {\n    const mostRecent = reversedTotalMoveHistory.find(predicate);\n    return mostRecent !== undefined ? mostRecent.dropped : undefined;\n  };\n\n  // TODO: Optimize this later\n  return rawAtomFn(\n    findMostRecentId(() => true),\n    findMostRecentId(\n      (dropAttempt) =>\n        boardObjects[dropAttempt.dragged].color === boardObjects[boardObjectId].color &&\n        boardObjects[dropAttempt.dragged].shape === boardObjects[boardObjectId].shape,\n    ),\n    findMostRecentId(\n      (dropAttempt) =>\n        boardObjects[dropAttempt.dragged].color === boardObjects[boardObjectId].color,\n    ),\n    findMostRecentId(\n      (dropAttempt) =>\n        boardObjects[dropAttempt.dragged].shape === boardObjects[boardObjectId].shape,\n    ),\n  );\n};\n\nconst parseAtomRawFnString = (rawAtomFnString: string): AtomFn[] => {\n  // Drop in any bucket position if *\n  if (rawAtomFnString === '*') {\n    // Assuming BucketPosition is numbered from 0 to 3.\n    return [0, 1, 2, 3].map((bucketPosition) => () => bucketPosition);\n  }\n\n  const regex = /^\\[(.+)]$/;\n  const fnsRawStrings = rawAtomFnString.match(regex);\n  if (!fnsRawStrings || fnsRawStrings.length !== 2) {\n    throw Error(`Bad function value: ${rawAtomFnString}`);\n  }\n  const fnStrings = fnsRawStrings[1].split(',');\n  return fnStrings.map((fnString) => {\n    // eslint-disable-next-line no-eval\n    const evalFn: RawAtomFn = eval(`(p=NaN, pcs=NaN, pc=NaN, ps=NaN) => ${fnString}`);\n    return convertRawAtomFnToAtomFn(evalFn);\n  });\n};\n\nconst parseAtomString = (atom: string): Atom => {\n  const regex = /\\((\\d+|\\*),(.+),(.+),(\\d+|\\*+),(\\*|\\[.*])\\)/;\n  const matches = regex.exec(atom);\n  if (matches === null) {\n    throw Error(\n      `Invalid atom syntax: ${atom}\\n\\nFYI:\\nCorrect Syntax: (counter,shape,color,position,[bucketFunction1,...])\\nCorrect example: (10,*,green,10,[2,(pc+1)%4])\\n\\nRemember, spaces are only used for separating multiple atoms in the same row.\\nExample:\\n(10,square,*,*,[1,2]) (10,*,green,10,[2,3])`,\n    );\n  }\n  const [, matchedCounter, matchedShape, matchedColor, matchedPosition, matchedFn] = matches;\n\n  const counter = matchedCounter === '*' ? Infinity : Number(matchedCounter);\n\n  // Allow * to be represented as NaN\n  const position = Number(matchedPosition);\n\n  const errors = [];\n  const shape = matchedShape;\n  const validShapes = Object.values(Shape).filter((shape) => VALID_SHAPES.has(shape));\n  if (!validShapes.includes(shape as Shape)) {\n    errors.push(\n      `\"${matchedShape}\" is not a valid shape.\\n\\nSupported shapes: ${validShapes.join(\n        ', ',\n      )}\\nSyntax: (counter,shape,color,[bucketFunction1,...])`,\n    );\n  }\n  const color = matchedColor;\n  if (!Object.values(Color).includes(color as Color)) {\n    errors.push(\n      `\"${matchedColor}\" is not a valid color.\\n\\nSupported colors: ${Object.values(Color).join(\n        ', ',\n      )}\\nSyntax: (counter,shape,color,[bucketFunction1,...])`,\n    );\n  }\n\n  // const fnWhitelist = /[pcs,*[\\]+\\-%]/;\n  // if (!fnWhitelist.test(matchedFn)) {\n  //   errors.push(\n  //     `\"${matchedFn}\" contains invalid characters.\\n\\nSupported colors: ${Object.values(Color).join(\n  //       ', ',\n  //     )}\\nSyntax: (counter,shape,color,[bucketFunction1,...])`,\n  //   );\n  // }\n\n  const fn = matchedFn;\n\n  if (errors.length > 0) {\n    throw Error(`Invalid atom: ${atom}\\n\\nDetails:\\n ${errors.join('\\n\\n')}`);\n  }\n\n  return {\n    id: shortid.generate(),\n    counter,\n    shape: shape as Shape,\n    position,\n    color: color as Color,\n    fns: parseAtomRawFnString(fn),\n  };\n};\n\nconst parseRow = (row: string): Atom[] => {\n  return row.split(' ').map(parseAtomString);\n};\n\nexport const parseRuleArray = (rawRuleArray: string) => rawRuleArray.split('\\n').map(parseRow);\n\nexport default parseRow;\n","module.exports = __webpack_public_path__ + \"static/media/smiley-face.770bd064.png\";","// eslint-disable-next-line import/no-cycle\nimport { RootAction } from '../store/actions';\n\nexport type BoardObjectId = string;\n\nexport enum BucketPosition {\n  TL = 0,\n  TR = 1,\n  BR = 2,\n  BL = 3,\n}\n\nexport type BoardObjectItem = {\n  debugInfo?: string;\n  buckets: Set<BucketPosition>;\n  id: BoardObjectId;\n  type: 'object';\n};\n\nexport type BoardObjectType = {\n  id: string; // -1 denotes an undefined value\n  color: Color;\n  shape: Shape;\n  x: number;\n  y: number;\n};\n\nexport type BucketType = { pos: BucketPosition; x: number; y: number; id: string };\n\nexport type DropAttempt = { dragged: string; dropped: BucketPosition };\n\n// TODO: Convert to enum\nexport type Page = 'RuleGame' | 'Entrance';\n\nexport enum Color {\n  ANY = '*',\n  RED = 'red',\n  BLUE = 'blue',\n  BLACK = 'black',\n  YELLOW = 'yellow',\n  GREEN = 'green',\n}\n\nexport enum Shape {\n  ANY = '*',\n  SQUARE = 'square',\n  TRIANGLE = 'triangle',\n  STAR = 'star',\n  CIRCLE = 'circle',\n  NOTHING = 'nothing',\n  BUCKET = 'bucket',\n  HAPPY = 'happy',\n  CHECK = 'check',\n}\n\nexport const VALID_SHAPES = new Set<Shape>([\n  Shape.ANY,\n  Shape.SQUARE,\n  Shape.TRIANGLE,\n  Shape.STAR,\n  Shape.CIRCLE,\n]);\n\nexport const VALID_COLORS = new Set<Color>([\n  Color.ANY,\n  Color.RED,\n  Color.BLUE,\n  Color.BLACK,\n  Color.YELLOW,\n]);\n\nexport type AtomFn = (\n  boardObjectId: BoardObjectId,\n  totalMoveHistory: DropAttempt[],\n  boardObjects: { [id: string]: BoardObjectType },\n) => BucketPosition;\n\nexport type Atom = {\n  id: string;\n  counter: number;\n  shape: Shape;\n  color: Color;\n  position: number;\n  fns: AtomFn[];\n};\n\nexport type ActionButton = {\n  key: string;\n  label: string;\n  action: ((id: string) => RootAction) | RootAction | (RootAction | ((id: string) => RootAction))[];\n};\n\nexport type RuleRow = Atom[];\n\nexport type RuleArray = RuleRow[];\n\nexport type Game = {\n  id: string;\n  name: string;\n  ruleArray?: string;\n  boardObjectsArrays: string[];\n  useRandomBoardObjects: boolean;\n  numRandomBoardObjects: number;\n  numConsecutiveSuccessfulMovesBeforePromptGuess?: number;\n  restartIfNotCleared?: boolean;\n};\n\nexport type ExportedFile = {\n  id: string;\n  version: string;\n  games: { [id: string]: Game };\n  ruleArrays: { [id: string]: { id: string; name: string; stringified: string; order?: number[] } };\n  boardObjectsArrays: {\n    [id: string]: { id: string; name: string; value: BoardObjectType[] };\n  };\n};\n"],"sourceRoot":""}