<!-- This is the main build file for use with Apache Ant. It tells Ant
     how to compile our application (My.ArXiv) from the source code, 
     how to deploy it, how to build Javadoc documentation, etc.

    To carry out a particular operation with Ant, you provide the name of the
    appropriate target. E.g., to compile the code, you type 

      ant compile

     Some of the other targets are:

     jar : "compile" + create a jar file
     deploy : "jar" + deploy the code to the Tomcat webapps directory
     reload : "deploy" + cause Tomcat to reload the application
     javadoc : "compile" + create Javadoc API documentation
     deploy-javadoc: "javadoc" + deploy docs to the Tomcat webapps directory

     Apache Ant is available for most modern operating systems.
     You can read more about Apache Ant at http://ant.apache.org/manual/index.html

-->

<project name="arxiv-xs" default="jar" basedir=".">

<!-- Property Definitions -->

 <property name="src" location="src"/>
 <property name="build" location="../classes"/>
 <property name="lib" location="../lib"/>
 <!-- Local version of standard tomcat jar files. They don't need
      to be copied to webapps/arxiv/WEB-INF, as Tomcat already will
      have access to them in runtime; however, on cactuar
      we need these local versions during compile time, 
      since Tomcat's own directory is not world-readable.
 -->
 <!-- property name="tomcat.lib.copy" location="../tomcat-lib"/ -->
 <!-- catalina.jar should be moved to this dir from tomcat-lib on
      cactuar and scils
   -->
 <!-- property name="tomcat.lib.copy2" location="../tomcat-lib-to-copy"/ -->
 <!-- A local directory where Java API docs will be put -->
 <property name="arxiv.doc" location="../doc"/>
 <property name="arxiv.api" location="${arxiv.doc}/html/api"/>

 <property name="build.tmp" location="/tmp"/>


<!-- The place where Tomcat lives, on various machines where we run -->
<property name="tomcat.home.tomcat7"  value="/usr/share/tomcat7" />
<property name="tomcat.home.tomcat6"  value="/usr/share/tomcat6" />  
<property name="tomcat.home.rutgers"  value="/www/my-dev.arxiv.rutgers.edu" />
 
<property name="tomcat.home1" value="/usr/local/tomcat"/>

<condition property="tomcat.home2" 
	   value="${tomcat.home.rutgers}" 
	   else="${tomcat.home1}">
  <available file="${tomcat.home.rutgers}"/>
</condition>


<condition property="tomcat.home3" 
	   value="${tomcat.home.tomcat6}" 
	   else="${tomcat.home2}">
  <available file="${tomcat.home.tomcat6}"/>
</condition>

<condition property="tomcat.home" 
	   value="${tomcat.home.tomcat7}" 
	   else="${tomcat.home3}">
  <available file="${tomcat.home.tomcat7}"/>
</condition>


<echo message="tomcat.home=${tomcat.home}"/>

<!-- the location of files that will appear at the "root" of our
     website (regardless of whether it's localhost or
     my.arxiv.org) -->
<condition property="tomcat.deploy.docs" value="${tomcat.home}/htdocs" else="${tomcat.home}/webapps/ROOT">
  <available file="${tomcat.home.rutgers}"/>
</condition>

<property name="app.name"       value="arxiv"/>
<!-- <property name="app.name"       value="arxiv.laurent"/> --> 
<!-- property name="app.name"       value="arxiv.tmp"/ -->
<property name="deploy.home"    value="${tomcat.home}/webapps/${app.name}"/>
<property name="dist.home"      value="${deploy.home}"/>
<property name="dist.src"       value="${app.name}.jar"/>
<property name="dist.war"       value="${app.name}.war"/>
<property name="javadoc.home"   value="${deploy.home}/javadoc"/>
<!-- property name="javadoc.home"   value="webroot/javadoc"/ -->


<!-- Tomcat libraries; Tomncat 5.5 at Rutgers, Tomcat 6.* or 7.* elsewhere -->
<property name="tomcat.lib.rutgers"     value="/usr/local/tomcat55/common/lib"/>

<condition property="tomcat.lib" value="${tomcat.lib.rutgers}" else="${tomcat.home}/lib">
  <available file="${tomcat.lib.rutgers}"/>
</condition>


<echo message="tomcat.lib=${tomcat.lib}"/>

<echo message="tomcat.lib=${tomcat.lib}"/>


<!-- Our web application's library directory and classes directory -->
<property name="deploy.lib"      value="${deploy.home}/WEB-INF/lib" />

<!-- where to look for OpenJPA, at home and on scils -->
<condition property="openjpa" 
	   value="/usr/local/apache-openjpa-2.1.1"
	   else="${user.home}/apache-openjpa-2.1.1" >
  <available file="/usr/local/apache-openjpa-2.1.1"/>
</condition>

<property name="javamail.lib"  location="../javamail-1.4.5/lib"/>


<path id="classpath"
       description="The classpath to use for compiling and running AXS">
   <!-- fileset file="../lucene/lucene-3.3.0/lucene-core-3.3.0.jar"/ -->

   <fileset dir="${tomcat.lib}">
     <include name="catalina.jar"/>
     <include name="servlet-api.jar"/>

     <include name="catalina-ant.jar"/>
     <include name="tomcat-coyote.jar"/>
     <include name="tomcat-util.jar"/>
     <include name="jsp-api.jar"/>
     <include name="tomcat-api.jar"/>
   </fileset>

   <fileset dir="${lib}">  <!-- from the lib directory, take all third-party JAR files, but not our axs.jar -->
     <include name="*.jar"/>
     <exclude name="axs.jar"/>
   </fileset>
   <!-- Tomcat JAR files, local copy -->
   <!-- fileset dir="${tomcat.lib.copy}">
     <include name="*.jar"/>
   </fileset -->
   <!-- More Tomcat JARs, local copy-->
   <!-- fileset dir="${tomcat.lib.copy2}"> 
     <include name="*.jar"/>
   </fileset -->
   <fileset dir="${openjpa}">
     <include name="**/*.jar"/>
   </fileset>
   <fileset dir="${javamail.lib}">
     <include name="*.jar"/>
   </fileset>
   <pathelement location="/usr/local/tomcat/bin/tomcat-juli.jar"/>
 </path>

 <echo message="Path = ${toString:classpath}"/>

 <path id="javaagent">
   <fileset dir="${openjpa}">
     <!-- include name="openjpa-*.jar"/ -->
     <include name="openjpa-all-*.jar"/>
   </fileset>
 </path>
 <pathconvert property="javaagent" refid="javaagent"/>


<!-- An attempt to tell Ant where OpenJPA jars are, for a
taskdef. This is an alternative to putting them into ~/.ant/lib, which
works in ant 1.8 but does not seem to work with the ant 1.7
installation on cornell machines.  See an example at
http://paulgrenyer.blogspot.in/2011/11/catalina-ant-for-tomcat-7.html
. (2013-07-20). -->
<path id="openjpa-classpath">
   <fileset dir="${openjpa}">
     <include name="openjpa-*.jar"/>
   </fileset>
</path>


<!-- this is for ant itself to use in the Reload task -->
<path id="catalina-ant-classpath">
    <fileset dir="${tomcat.lib}">
        <include name="catalina-ant.jar"/>
        <include name="tomcat-coyote.jar"/>
        <include name="tomcat-util.jar"/>
    </fileset>
    <fileset dir="${tomcat.home}/bin">
        <include name="tomcat-juli.jar"/>
    </fileset>
</path>

<!-- An auxiliary target; you aren't likely to use it directly.  It just creates necessary directories -->
<target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${lib}"/>
    <mkdir dir="${build}"/>
    <mkdir dir="${build}/META-INF"/>

    <mkdir  dir="${deploy.home}/META-INF"/>
    <mkdir  dir="${deploy.home}/WEB-INF"/>
    <mkdir  dir="${deploy.lib}"/>
    <mkdir  dir="${javadoc.home}"/>
</target>


<!-- This target tells Ant how to compile AXS. We used to have the argument 
     target="1.5"
in the javac command, to make it easier for people elsewhere to use our
code; but not anymore. -->
<target name="compile" depends="init"
        description="Compile the Java source code">
  <!-- Compile the java code from ${src} into ${build} -->
  <javac srcdir="${src}" destdir="${build}"
	 includes="edu/**,org/**"  optimize="on"
	 target="1.5"
	 debug="on" debuglevel="lines,vars,source"
	 includeantruntime="false" >
    <compilerarg value="-Xlint:unchecked"/>
    <classpath refid="classpath"/>
  </javac>

</target>

<target name="enhance" description="Enhance class files for OpenJPA">
  <!-- META-INF/persistence.xml should be under a directory that's 
       in the classpath; so we simply include it into the jar -->
  <copy  file="META-INF/persistence.xml" todir="${build}/META-INF"/>

  <!-- as per instructions in http://openjpa.apache.org/builds/1.0.2/apache-openjpa-1.0.2/docs/manual/ref_guide_integration.html -->
  <taskdef name="openjpac" classname="org.apache.openjpa.ant.PCEnhancerTask"
	   classpathref="openjpa-classpath"/>

  <!-- invoke enhancer on all .java files below the model directory -->
  <openjpac>
    <config
       propertiesFile="${build}/META-INF/persistence.xml"/> 
    <!-- classpath refid="classpath"/ -->

   <classpath>
      <!-- path refid="entity.cp"/>
      <path refid="jpa.used.cp"/ -->
      <pathelement location="${build}"/>
      <path refid="classpath"/>
    </classpath> 


    <fileset dir="${build}/edu/rutgers/axs/sql">
      <!-- include name="**/*.class"/ -->
        <include name="Board.class" />
    </fileset>
  </openjpac>

</target>

<!-- ====================================================
Building a JAR file
-->
<target name="jar" depends="compile,enhance"
        description="Builds a Jar file">

  <jar destfile="${lib}/axs.jar"   basedir="${build}">
    <!-- file="manifest-data.dat" mode="replace" -->
    <!-- manifest> 
      <attribute name="Main-Class" value="edu.dimacs.mms.borj.Driver"/>
      <attribute name="Class-Path" value=". xercesImpl.jar xml-apis.jar"/>	
    </manifest -->
  </jar>
</target>

<!-- an alternative to "deploy" -->
<target name="war" depends="init,jar">
<war destfile="../arxiv.war" webxml="WEB-INF/web.xml">
  <fileset dir="web" excludes=".svn" />
  <lib dir="${lib}"><include name="**/*.jar"/></lib>
  <lib dir="${openjpa}">    <include name="*.jar"/> </lib>
  <lib dir="${openjpa}/lib"> <include name="*.jar"/> </lib>
  <lib dir="${javamail.lib}">    <include name="*.jar"/> </lib>
  <!-- lib dir="${tomcat.lib.copy2}"> <include name="*.jar"/> </lib -->
  <webinf dir="WEB-INF"/>
  <webinf dir="."><include name="osmot.conf"/></webinf>
  <metainf dir="META-INF"/>
</war>

</target>

<!-- web site deployment -->
<target name="deploy"  depends="init,jar">
  <copy  file="osmot.conf" tofile="${deploy.home}/WEB-INF/osmot.conf"/>
  <copy todir="${deploy.lib}">
    <fileset dir="${lib}"><include name="**/*.jar"/></fileset>
    <fileset dir="${openjpa}">    <include name="*.jar"/> </fileset>
    <fileset dir="${openjpa}/lib"> <include name="*.jar"/> </fileset>
    <fileset dir="${javamail.lib}">    <include name="*.jar"/> </fileset>

    <!-- On scils and cactuar (with tomcat 5.5), but not at home (with
	 Tomcat 6.0), we must copy catalina.jar, for the RealmBase
	 class. 2010-06-17, 2011-11-14 -->
    <!-- fileset dir="${tomcat.lib.copy2}"> <include name="*.jar"/> </fileset -->
  </copy>
  <!-- copy  file="META-INF/context.html" tofile="${deploy.home}/META-INF/context.html"/ -->
  <copy todir="${deploy.home}/META-INF">
	<fileset dir="META-INF"/>
  </copy>

  <copy todir="${deploy.home}/WEB-INF">
	<fileset dir="WEB-INF"/>
  </copy>
  
  <echo message="Copying files from web/ to ${deploy.home}" />
  <copy todir="${deploy.home}">
    <fileset dir="web" excludes=".svn" />
  </copy>

  <!-- echo message="Copying files from webroot/ to ${tomcat.deploy.docs}" />
  <copy todir="${tomcat.deploy.docs}">
    <fileset dir="webroot" excludes=".svn" />
  </copy -->
</target>

<!-- only copies JSP files -->
<target name="deploy-jsp">     
  <echo message="Copying files from web/ to ${deploy.home}" />
  <copy todir="${deploy.home}">
    <fileset dir="web" excludes=".svn" />
  </copy>
</target>


<!-- Reports the current version of the source code (as per Version.java) -->
<target name="version">
  <exec executable="grep" outputproperty="arxiv.ver">
    <arg line="String.version ${src}/edu/rutgers/axs/Version.java"/>
    <redirector >
      <outputfilterchain >
	<replaceregex pattern="[^0-9\.]" replace="" flags="g"/>
      </outputfilterchain>
    </redirector>
  </exec>
  <echo message="Assuming the My.Arxiv version is ${arxiv.ver}"/>
</target>


<!-- Build the HTML documentation directory by running Javadoc -->

<target name="javadoc" depends="compile,version">
  <echo message="Javadoc: Assuming the My.Arxiv version is ${arxiv.ver}"/>

  <copy todir="${arxiv.doc}">
    <fileset dir="doc/"/>
  </copy>

  <!-- copy todir="${arxiv.doc}/html">
    <fileset dir="sample-data/" includes="sample.xml,sample-suite-out.xml,eg-learner-param-1.xml"/>
  </copy -->

  <javadoc packagenames="edu.rutgers.axs,edu.rutgers.axs.*"
	   sourcepath="${src}"
           destdir="${arxiv.api}"
	   author="true"
           version="true"
           use="true"
	   link="http://java.sun.com/j2se/1.5.0/docs/api/"
	   header="&lt;em&gt;My.ArXiv ${arxiv.ver}&lt;/em&gt;"   
	   windowtitle="My.ArXiv ${arxiv.ver} API" 
	   overview="doc/html/api/overview.html">
    <classpath refid="classpath"/>
  </javadoc>

  <echo message="Documentation has been assembled in ${arxiv.doc}"/>

</target>


<!-- Copies Javadoc API files and other similar docs to the web server -->
<target name="deploy-javadoc" depends="javadoc">     
  <echo message="Copying files from web/ to ${deploy.home}" />
  <copy todir="${deploy.home}/doc">
    <fileset dir="${arxiv.doc}" />
  </copy>
</target>

<!-- Deletes the class directory -->
<target name="clean">
  <delete dir="${build}"/>
</target>

<!-- Deletes all files and subdirectories from our web application
directory. This is essential to do if we e.g. have renamed some of the
JSP or JAR files, and want to make sure not to have any files with old
names to hang around. -->
<target name="clean-web">
  <delete includeemptydirs="true">
    <fileset dir="${deploy.home}" includes="**/*"/>
  </delete>
</target>

<!-- ======================================================================
Causing the web server to reload our web application. For how this works, see
http://tomcat.apache.org/tomcat-6.0-doc/manager-howto.html or
http://tomcat.apache.org/tomcat-7.0-doc/manager-howto.html
 -->


<property name="reloadclass" value="org.apache.catalina.ant.ReloadTask"/>
<!-- property name="reloadclass.correct" value="org.apache.catalina.ant.ReloadTask"/>

<condition property="reloadclass" value="${reloadclass.correct}" else="">
  <available classname="${reloadclass.correct}"/>
</condition -->


<echo message="reloadclass=${reloadclass}"/>

<!-- The reload URL under Tomcat7 is different from Tomcat6 and 5.5 -->
<condition property="reload.url" 
	   value="http://localhost:8080/manager/text"
	   else="http://localhost:8080/manager">
  <available file="${tomcat.home.tomcat7}"/>
</condition>

<!-- Or try to run ant as follows:
      ant -lib ../lib/catalina-ant.jar  , 
   or place that jar file into ~/.ant/lib
   see http://ant.apache.org/manual/using.html#external-tasks
 -->

<taskdef name="reload"    classname="${reloadclass}"
	 classpathref="classpath"/>
  
<!-- The user list, with roles, is stored in /usr/local/tomcat/conf/tomcat-users.xml -->
<target name="reloadonly" description="Reload web application on localhost (without updating)">
  <echo message="reload.url=${reload.url}"/>
  <reload url="${reload.url}" username="vmenkov2" password="vmenkov2-manager-script" path="/${app.name}"/>
</target>

<target name="reload" description="Deploy and reload web application on localhost"
        depends="deploy,reloadonly">
</target>


<!-- Sample JPA application -->
<target name="run-sample" depends="jar"
        description="Run the example Main program">
  
  <java classname="edu.rutgers.axs.sql.Main" 
	classpathref="classpath" fork="yes"   failonerror="yes">
    <!--
       Specifying the openjpa jar as the javaagent argument is
       necessary in order for automatic class-enhancement to work.
      -->
    <!-- jvmarg value="-javaagent:${javaagent}"/ --> 
    
    <!--
       Specify the system properties to use when configuring
       OpenJPA. Note that these will only be used becuase in the
       examples, the call to "Persistence.createEntityManagerFactory"
       is passed "System.getProperties()".
      -->
  </java>
</target>

<target name="run-show" depends="jar"
        description="Run the ShowAnnotations program">
  
  <java classname="edu.rutgers.axs.sql.ShowAnnotations" 
	classpathref="classpath" fork="yes"   failonerror="yes">
    <arg value="edu.rutgers.axs.sql.User"/>
  </java>
</target>

<target name="run-export" depends="jar" description="Export tables">
  <java classname="edu.rutgers.axs.sql.Export"
	classpathref="classpath" fork="yes"   failonerror="yes">
  </java>
</target>

<target name="run-create-roles" depends="jar" description="Creates any missing roles in the role table">
  <java classname="edu.rutgers.axs.sql.CreateRoles"
	classpathref="classpath" fork="yes"   failonerror="yes">
  </java>
</target>

<property name="pvt" location="../private"/>

<target name="getconf">
    <copy todir=".">
      <fileset dir="${pvt}">
	<include name="osmot.conf"/>
      </fileset>
    </copy>
    <copy todir="WEB-INF">
      <fileset dir="${pvt}/WEB-INF">
	<include name="connection.properties"/>
      </fileset>
    </copy>
    <copy todir="META-INF">
      <fileset dir="${pvt}/META-INF">
	<include name="persistence.xml"/>
      </fileset>
    </copy>
</target>

</project>

